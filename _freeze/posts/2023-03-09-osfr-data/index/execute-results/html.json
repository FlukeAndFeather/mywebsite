{
  "hash": "6b8a47ef3219c05a3e138cd29f51e3bd",
  "result": {
    "markdown": "---\ntitle: \"Uploading data to OSF in R\"\ndescription: \"I'm learning to navigate the Open Science Framework (OSF), but ran into issues uploading a directory to my project. Here's how I did it in R.\"\nauthor:\n  - name: Max Czapanskiy\ndate: 03-09-2023\nimage: preview-image.png\ncategories: [R, OSF, reproducibility]\nbibliography: references.bib\n---\n\n\nHow do we keep our data and code in-sync while an analysis is in progress? This came up for me recently when my laptop went down[^1]. All my code was in a GitHub repo, but the data were scattered across a couple Google Drive folders shared with me by collaborators. Although [@tierney2020] give excellent advice for how to link the two *after* an analysis is complete and heading to publication, what should I do for a work in progress when the data are too large for GitHub or can't be shared publicly yet?\n\n[^1]: I can't remember who pointed this out or where I read it, but IIRC the average hard drive lifespan is shorter than the average duration of a PhD. So make sure you keep a backup!\n\nI'm using this as an opportunity to explore the [Open Science Framework](osf.io) (OSF) and see if I should incorporate it into my workflow. I created a new project (private for now) and linked it to my GitHub repo. Then I tried uploading my data, which are in nested directories, and learned you can only upload files through the OSF interface, not a whole directory structure.\n\nNaturally I turned to R. Here's what worked for me.\n\n## Connect to OSF\n\nWe're using the `osfr` package for this task. Thanks ROpenSci! The [authentication vignette](https://docs.ropensci.org/osfr/articles/auth.html) does a good job explaining how to get a personal access token (PAT). You can create an .Renviron file in your project repository and add your PAT with this code. Remember to replace `[YOUR OSF PAT]` with your actual OSF PAT!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.create(\".Renviron\")\nwriteLines(\"OSF_PAT=[YOUR OSF PAT]\", \".Renviron\")\n```\n:::\n\n\nAfter you restart your R session, you should be able to access your OSF projects.\n\n## Retrieve your node\n\nYour OSF project is a \"node\" and the data files and directories within it are its child nodes. To upload files, you need a handle to the right directory. I made a directory called \"data\" in my OSF storage, where I'm going to upload everything.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(osfr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nAutomatically registered OSF personal access token\n```\n:::\n\n```{.r .cell-code}\n# Retrieve the Antarctic Winter Communities project node\nantwincomm_prj <- osf_retrieve_node(\"https://osf.io/hwnvy/\")\n# Sanity check the project and file structure\nantwincomm_prj\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  name                                                 id    meta            \n  <chr>                                                <chr> <list>          \n1 Antarctic Peninsula Marine Winter Predator Community hwnvy <named list [3]>\n```\n:::\n\n```{.r .cell-code}\nosf_ls_files(antwincomm_prj)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 3\n  name  id                       meta            \n  <chr> <chr>                    <list>          \n1 data  6407ba51e25636042723251c <named list [3]>\n```\n:::\n\n```{.r .cell-code}\n# Retreive the \"data\" node\nantwincomm_files <- osf_ls_files(antwincomm_prj)\nantwincomm_data <- antwincomm_files[antwincomm_files$name == \"data\"]\n```\n:::\n\n\n## Upload directory\n\nOnce you have the handle to your data directory then `osf_upload()` will do the rest. Tell it to include subdirectories with `recurse` and, if you have a lot of files, set `progress` to `TRUE` so you can keep an eye on it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlocal_data <- \"path/to/your/data/here\"\nosf_upload(antwincomm_data, local_data, recurse = TRUE, progress = TRUE)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}