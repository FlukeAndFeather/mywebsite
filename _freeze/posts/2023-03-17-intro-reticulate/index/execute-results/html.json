{
  "hash": "842289bf7d5c4a0aa2f7cc96240551a9",
  "result": {
    "markdown": "---\ntitle: \"Python and R together with reticulate\"\ndescription: \"Intro to reticulate lesson for SCRUBs\"\nauthor:\n  - name: Max Czapanskiy\nformat: \n  html:\n    toc: true\n    toc-depth: 2\ndate: 03-17-2023\nimage: reticulated_python.png\ncategories: [R, Python, reticulate, SCRUBs]\n---\n\n\n## Reticulate\n\nUse R and Python together! Note: this lesson is for reticulate specifically. It's not a Python lesson. But if you don't know Python you should still be able to follow along with a friend.\n\n## Setup\n\nCreate an RStudio project, then create a Quarto document.\n\n### Install Python\n\nSo many ways. Too many ways! Here's one. Do this from the R console.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"reticulate\")\nreticulate::install_miniconda()\n```\n:::\n\n\n### Create a virtual environment\n\nYou likely keep all your installed R packages in one library. The standard practice in Python is to create separate environments for projects instead. Conda helps us do that. Still in the console!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreticulate::conda_create(\n  \"intro-reticulate\", \n  packages = c(\"jupyter\", \"numpy\", \"pandas\", \"scikit-learn\")\n)\nreticulate::use_condaenv(\"intro-reticulate\")\nreticulate::py_config() # Are you in the right place?\n```\n:::\n\n\nWe just created a Conda environment *and* installed some useful Python packages. jupyter is the Python equivalent to knitr, numpy lets you work with numbers, pandas lets you work with data frames, and scikit-learn is for machine learning.\n\n## Tidy Tuesday\n\nLearn reticulate with a [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) exercise. Specifically [Numbats](https://github.com/rfordatascience/tidytuesday/blob/master/data/2023/2023-03-07/readme.md).\n\n### Load the data\n\nWe can do that with R. In your Quarto document, create an R code chunk and download the Tidy Tuesday data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"tidytuesdayR\")\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.7     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nnumbats_tidytuesday <- tidytuesdayR::tt_load(2023, week = 10)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Compiling #TidyTuesday Information for 2023-03-07 ----\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- There is 1 file available ---\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Starting Download ---\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 1: `numbats.csv`\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n--- Download complete ---\n```\n:::\n\n```{.r .cell-code}\nnumbats <- numbats_tidytuesday$numbats\nnumbats\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 805 × 16\n   decimalLatitude decimalLongitude eventDate           scientificName       \n             <dbl>            <dbl> <dttm>              <chr>                \n 1           -37.6             146. NA                  Myrmecobius fasciatus\n 2           -35.1             150. 2014-06-05 02:00:00 Myrmecobius fasciatus\n 3           -35               118. NA                  Myrmecobius fasciatus\n 4           -34.7             118. NA                  Myrmecobius fasciatus\n 5           -34.6             117. NA                  Myrmecobius fasciatus\n 6           -34.6             117. NA                  Myrmecobius fasciatus\n 7           -34.6             118. NA                  Myrmecobius fasciatus\n 8           -34.6             117. NA                  Myrmecobius fasciatus\n 9           -34.6             117. NA                  Myrmecobius fasciatus\n10           -34.6             117. NA                  Myrmecobius fasciatus\n# … with 795 more rows, and 12 more variables: taxonConceptID <chr>,\n#   recordID <chr>, dataResourceName <chr>, year <dbl>, month <chr>,\n#   wday <chr>, hour <dbl>, day <date>, dryandra <lgl>, prcp <dbl>, tmax <dbl>,\n#   tmin <dbl>\n```\n:::\n:::\n\n\n### Numbat circadian rhythms\n\nWere numbats sighted during the day or at night? Create another R chunk and categorize sighting time of day into day and night. The numbers look pretty even! But could environmental covariates influence that?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnumbats <- numbats %>% \n  mutate(is_day = hour >= 6 & hour <= 18) %>% \n  drop_na(is_day, prcp, tmax)\ncount(numbats, is_day)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  is_day     n\n  <lgl>  <int>\n1 FALSE     31\n2 TRUE      26\n```\n:::\n:::\n\n\n### R to Python\n\nLet's use Python to figure out if precipitation and temperature affects the likelihood of seeing numbats at night. Create a **Python** code chunk.\n\n\n::: {.cell}\n\n```{.python .cell-code}\n# This is like \"library()\" in R\nfrom sklearn.linear_model import LogisticRegression\n# Use `r.___` to access R objects\nenviro = r.numbats[[\"prcp\", \"tmax\"]]\nis_day = r.numbats[\"is_day\"]\n# Fit a classifier (clf)\nclf = LogisticRegression(random_state=0).fit(enviro, is_day)\n```\n:::\n\n\nWell done! You just fit a classifier in Python to data you loaded and cleaned with R. That's pretty cool! Let's make some predictions on a reference grid.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport numpy as np\nimport pandas as pd\nfrom sklearn.utils.extmath import cartesian\n\n# The precipitation and temperature values we want to make predictions for\nprcp = np.arange(r.numbats[\"prcp\"].min(), r.numbats[\"prcp\"].max(), 0.1)\ntmax = np.arange(r.numbats[\"tmax\"].min(), r.numbats[\"tmax\"].max(), 0.2)\n# All combinations of prcp and tmax\nref_grid = pd.DataFrame(cartesian((prcp, tmax)), columns=[\"prcp\", \"tmax\"])\n# Predict the probability of \"is_day\". predict_proba() returns two columns,\n# p(!is_day) and p(is_day). Remember `[:, 1]` gets the *second* column \n# because Python uses 0-indexing\nref_grid[\"is_day\"] = clf.predict_proba(ref_grid)[:, 1]\nref_grid\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       prcp  tmax    is_day\n0       0.0  13.7  0.837053\n1       0.0  13.9  0.832279\n2       0.0  14.1  0.827395\n3       0.0  14.3  0.822400\n4       0.0  14.5  0.817291\n...     ...   ...       ...\n14701  11.3  38.5  0.000025\n14702  11.3  38.7  0.000024\n14703  11.3  38.9  0.000024\n14704  11.3  39.1  0.000023\n14705  11.3  39.3  0.000022\n\n[14706 rows x 3 columns]\n```\n:::\n:::\n\n\n### Python to R\n\nNow we'll use R to visualize the model predictions generated in Python. Make another R code chunk.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(reticulate)\n\n# Use py$____ to get python objects\npredict_prcp <- py$ref_grid %>% \n  # For each precipitation value, get the prediction at the median tmax\n  group_by(prcp) %>% \n  summarize(is_day = is_day[tmax = median(numbats$tmax)])\n\nnumbats %>% \n  mutate(is_day = as.numeric(is_day)) %>% \n  ggplot(aes(prcp, is_day)) +\n  geom_point() +\n  geom_line(data = predict_prcp) +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/viz-predict-1.png){width=672}\n:::\n:::\n\n\nIs this a bad model? You know it! But that's not the point.\n\n## Wrap up\n\n-   The reticulate package connects R and Python\n\n-   Python installations are a lot more variable (and tricky!) than R\n\n-   You can use both R and Python code, sharing data, in Quarto documents\n\n-   R -\\> Python with `r.___`\n\n-   Python -\\> R with `py$___` (must `library(reticulate)` first!)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}