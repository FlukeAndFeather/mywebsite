{
  "hash": "b32a4dfb8d8c706db6523630e0ec2c21",
  "result": {
    "markdown": "---\ntitle: Customizing ggplot components\ndescription: ggplot commands are good for 99% of figure customizations, but sometimes you need to edit individual plot components manually. Here's how.\nauthor:\n  - name: Max Czapanskiy\nformat: html\ndate: 2023-10-20\nimage: ice_coverage.jpg\ncategories: [R, ggplot, dataviz]\n---\n\n\nI'm working on the figures for a community ecology study and I want to use the same color scheme for the three communities in both geometries and text. It's easy to assign colors to geometries, but can be harder for text. In this example, I have a bar plot faceted by community, and I want the strip labels to match the colors I use to represent the communities in other figures.\n\nFirst, let's load some packages and data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(grid)\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ ggplot2 3.4.2     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.2\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nstations_clust <- readRDS(\"stations_clust.rds\")\n```\n:::\n\n\nNow we create the figure without color-coding text. From top to bottom, we have three communities (**Open water**, **Marginal ice**, and **Pack ice**) and their sea ice coverage associations. In my other figures I've color-code their geometries as [**green**]{style=\"color: #1B9E77\"}, [**orange**]{style=\"color: #D95F02\"}, and [**purple**]{style=\"color: #7570B3\"}. I'd like to make my facet strip labels use the same colors here.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian_coverge <- stations_clust %>%\n  drop_na(ice_coverage) %>%\n  group_by(pred_clust) %>%\n  summarize(median_ice = median(ice_coverage / 10, na.rm = TRUE))\n\np <- stations_clust %>% \n  drop_na(ice_coverage) %>% \n  ggplot(aes(x = ice_coverage / 10, fill = after_stat(x))) +\n  geom_histogram(bins = 20, color = \"grey30\") +\n  geom_vline(aes(xintercept = median_ice),\n             median_coverge,\n             color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(labels = scales::percent) +\n  scale_fill_distiller(palette = \"Blues\", guide = NULL) +\n  facet_grid(rows = vars(pred_clust)) +\n  labs(x = \"Ice coverage\",\n       y = \"# sites\") +\n  theme_minimal(base_size = 14) +\n  theme(strip.text = element_text(face = \"bold\"))\np\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nggplot will let me format *all* the facet strip labels using `theme()`, however individually formatting them is unsupported (as far as I'm aware). So we're going to look into the ggplot object's guts and manually adjust things. Here's how that works.\n\n## Force ggplot to generate the plot\n\nCalling `ggplot()` only defines the plot at a relatively high level. We need ggplot to actually generate all the plot elements (axes, geometries, legends, etc) before we can start mucking around with them. We do that by calling the `grid` package's `grid.force()` on the plot's *grob* (ggplot lingo for a *gr*aphical *ob*ject).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ng <- p %>% \n  ggplotGrob() %>% \n  grid.force()\n```\n:::\n\n\nNotice `ggplot` and `grob` objects are different classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(ggplot())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gg\"     \"ggplot\"\n```\n:::\n\n```{.r .cell-code}\nclass(ggplotGrob(ggplot()))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gtable\" \"gTree\"  \"grob\"   \"gDesc\" \n```\n:::\n:::\n\n\n## Find the relevant grobs\n\nNow we can look inside to see how ggplot is rendering the facet strip labels and start changing the graphical parameters (like color). The grobs within the plot are arranged in a tree-like structure. For example, legend labels are part of the legend are part of the overall layout. So each grob has both a *name* (the leaf of the tree) and a *path* (the sequence of branches leading to the leaf). Extract those like this.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get the names and paths of grobs\ngrob_ls <- grid.ls(g, print = FALSE)\ngrob_names <- grob_ls$name\ngrob_paths <- grob_ls$gPath\n```\n:::\n\n\nIf you examine `grob_paths` you'll get an idea of how the paths are structured. Here we see 18 grobs contain the word \"strip\" in the path. I've appended the grob names at the end to show the grob leaf and branches together.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncontains_strip <- str_detect(grob_paths, \"strip\")\npaste(grob_paths[contains_strip], grob_names[contains_strip], sep = \"::\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"layout::strip-r-1.7-6-7-6::strip\"                                                                                    \n [2] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1\"                                                                     \n [3] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199\"                                                    \n [4] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199::strip.background.y..zeroGrob.197\"                  \n [5] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199::strip.text.y.right..titleGrob.190\"                 \n [6] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199::strip.text.y.right..titleGrob.190::GRID.text.188\"  \n [7] \"layout::strip-r-2.9-6-9-6::strip\"                                                                                    \n [8] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1\"                                                                     \n [9] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201\"                                                    \n[10] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201::strip.background.y..zeroGrob.197\"                  \n[11] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201::strip.text.y.right..titleGrob.193\"                 \n[12] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201::strip.text.y.right..titleGrob.193::GRID.text.191\"  \n[13] \"layout::strip-r-3.11-6-11-6::strip\"                                                                                  \n[14] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1\"                                                                   \n[15] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203\"                                                  \n[16] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203::strip.background.y..zeroGrob.197\"                \n[17] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203::strip.text.y.right..titleGrob.196\"               \n[18] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203::strip.text.y.right..titleGrob.196::GRID.text.194\"\n```\n:::\n:::\n\n\nThese grobs include the three strip parents (`[1]`, `[7]`, and `[13]`), each of which has multiple children. The grob that actually contains the graphical parameters we want to edit have name like \"GRID.text.\\*\" (which I only figured out through trial and error, that's not immediately obvious).\n\n## Edit the grobs\n\nKnowing *where* the grobs we want to change are, we can change their graphical parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# This gets the names of the GRID.text grobs for the strip titles\nstrip_names <- str_subset(\n  grob_names[str_detect(grob_paths, \"strip.text.*titleGrob\")],\n  \"GRID.text\"\n)\n\n# I want to change the colors of the strip titles to match the Dark2 palette\ntxt_colors <- RColorBrewer::brewer.pal(3, \"Dark2\")\nfor (i in 1:3) {\n  # THIS IS THE KEY PART\n  g <- editGrob(grob = g,\n                # Even though the parameter is called gPath, you just give it\n                # the grob's name.\n                gPath = strip_names[i], \n                # Use gpar() to change the graphical parameter\n                gp = gpar(col = txt_colors[i]))\n}\n```\n:::\n\n\n## Success!\n\nNow the colors of my strip label text match the other figures in my paper.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrid.draw(g)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}