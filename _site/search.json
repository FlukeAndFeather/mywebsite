[
  {
    "objectID": "tutorials/git-and-github.html",
    "href": "tutorials/git-and-github.html",
    "title": "Git and GitHub",
    "section": "",
    "text": "SCRUBs Lesson Friday January 27, 2023"
  },
  {
    "objectID": "tutorials/git-and-github.html#pre-lesson-recap",
    "href": "tutorials/git-and-github.html#pre-lesson-recap",
    "title": "Git and GitHub",
    "section": "Pre-lesson recap",
    "text": "Pre-lesson recap\nBefore today’s lesson, you should have:\n\nFamiliarized yourself with the basics of Git and GitHub by reading Bryan 2018 (PDF on SCRUBs Drive)\nInstalled Git\nConnected RStudio to GitHub"
  },
  {
    "objectID": "tutorials/git-and-github.html#todays-agenda",
    "href": "tutorials/git-and-github.html#todays-agenda",
    "title": "Git and GitHub",
    "section": "Today’s agenda",
    "text": "Today’s agenda\nThe goal for today’s lesson is to get you just enough information to begin incorporating version control into your workflow. In order, we’ll cover:\n\nRStudio projects\nUsing Git\nBlowing it up and starting over\nBonus: sharing your work with GitHub Pages"
  },
  {
    "objectID": "tutorials/git-and-github.html#rstudio-projects",
    "href": "tutorials/git-and-github.html#rstudio-projects",
    "title": "Git and GitHub",
    "section": "RStudio projects",
    "text": "RStudio projects\nYou don’t have to use a project to use version control, but it sure does make it a lot easier. For more info about projects, see the R for Data Science chapter. Now let’s create an example RStudio project and connect it to GitHub. The preferred method for this is “New project, GitHub first”. See Happy Git with R for other options, but I suggest sticking with this one.\n\nCreate a GitHub repo\n\nGo to github.com\nClick the green “New” button to create a new repository\nCall it “myrepo” and click the green “Create repository” button\n\nCopy your repository link. It should be: https://github.com/[username]/myrepo.git.\n\n\n\n\nCreate an RStudio project with your repo\nCongratulations - you’ve created a Git repository! But right now it only lives on GitHub’s server. Let’s bring it down to your computer (clone your repo, in Git lingo).\n\nOpen RStudio\nFile &gt; New Project &gt; Version Control\n\nChoose Git for your version control then paste your repository link.\n\nYou now have a local copy of your repository that you can use for data analysis. A few things you should see in RStudio now:\n\n\nThe Git pane is where you’ll make Git do things. This is RStudio’s way of helping us avoid the command line and we’re very grateful for that.\nYour project name should now be visible in the top-right corner. Among other things, this means you’ll never have to call setwd() ever again. All R commands will execute relative to your project’s directory. You have no idea the number of problems this will help you avoid. Git aside, it’s reason enough to use projects.\nYou’ve got some new files.\n\nA directory called “.git”. NEVER TOUCH THIS. Forget it exists. Seriously.\nA text file called .gitignore. This is how you tell Git to ignore certain files, like sensitive data or very large files that are too big for GitHub.\nA project file called myrepo.Rproj. This is how RStudio knows you have a project. It’ll just hang out and make your life easier, you don’t have to do anything with it.\n\n\n\n\nProject do’s and don’ts (don’t’s?)\n\nNo nesting. Never put a project inside of another one. You want a flat hierarchy. Think Kansas: flatter than a pancake.\nCloud storage can cause headaches. If you use Drive, Box, or another service for syncing files you should probably put your projects somewhere else, like a local or external hard drive. Cloud sync software creates hidden files and modifies existing files in unpredictable ways that can make projects and version control puke all over themselves at random intervals. That said, if it’s your only choice, go for it. Then send me an email if you get an error message.\n\n\n\nRecap\nCongrats, you created a Git repository and turned it into an RStudio project on your local machine. But if you go back to GitHub and check out your repository, it will still look empty. In the next section, you’ll learn how to update your repository. But first, call an instructor over and show them your progress."
  },
  {
    "objectID": "tutorials/git-and-github.html#using-git",
    "href": "tutorials/git-and-github.html#using-git",
    "title": "Git and GitHub",
    "section": "Using Git",
    "text": "Using Git\nTL;DR: You’ll use commit and push for 85% of your version control needs.\n\nMake some changes\nGit tracks your changes. So let’s make some changes for Git to track.\n\nCreate a Quarto file. We have a lesson on Quarto later this quarter. Consider this a quick taste. In the Files pane, click on New Blank File &gt; Quarto Doc. Call it “myquarto.qmd”.\n\nAdd the following text to your Quarto document and save it.\n---\ntitle: My Quarto Document\nformat: html\n---\n\nThis is a Quarto document. It combines text, code, and outputs like figures.\n\nLet's pretend @fig-boring was way more interesting.\n\n```{r}`r ''`\n#| label: fig-boring\n#| fig-cap: A boring figure\n\nx &lt;- -5:5\ny &lt;- x^2\nplot(x, y, type = \"l\")\n```\nYou’ll understand what all this means after the Quarto lesson. For now, just know you’re creating a dynamic HTML document with a bit of text and a figure.\n\n\n\ncommit your changes\n\nSwitch over to your Git pane. You should have three changed files waiting for you.\n\nCheck the box for all three files (in the “Staged” column). The orange “?” will turn into a green “A”, indicating you’re adding these files to the repo.\nClick the Commit button in the Git pane. The commit window will appear, showing you the diff, or the changes you made. Every commit has to have a commit message. Enter “Initial commit” and hit the “Commit” button.\nYour Git pane should now be empty. This means all your changes have been tracked locally.\n\ncommit is a local operation! It tracks things just on your machine. Now let’s sync it up with GitHub.\n\n\npush your commits\nThis one is easy. Click Push in the Git pane.\nHead back over to GitHub in your browser. Refresh the page with your repository. It should now look like this:\n\nYour local repository (on your machine) and your remote repository (on GitHub) are now in sync. This serves as valuable back up and makes sharing easy!\n\n\nRecap\n\ncommit creates a local check point of your recently created, modified, and deleted files.\npush syncs your local commits to your remote repository on GitHub.\nCall an instructor over so they can see your repo on GitHub."
  },
  {
    "objectID": "tutorials/git-and-github.html#blowing-it-up-and-starting-over",
    "href": "tutorials/git-and-github.html#blowing-it-up-and-starting-over",
    "title": "Git and GitHub",
    "section": "Blowing it up and starting over",
    "text": "Blowing it up and starting over\nAt some point you’ll need to create another local copy of your repository (clone it from GitHub). Maybe you’re working on another computer, or you’re sharing your code with a collaborator, or Git did something weird and you need to blow it up and start over. Version control takes a very scary thing (re-creating your work from the ground up) and makes it easy.\n\nBlow it all up. By which I mean, delete your local files. First, close RStudio. Then delete the directory holding your project/repo. If it was in ~/Documents/GitHub/myrepo/, then delete the myrepo/ directory.\nclone it anew. Open RStudio. Create a new repository from version control as you did before.\n\nThis is one of the most valuable features of using version control. You can confidently make changes, experiment, and tinker secure in the knowledge you can always return to an earlier version."
  },
  {
    "objectID": "tutorials/git-and-github.html#sharing-your-work-with-github-pages",
    "href": "tutorials/git-and-github.html#sharing-your-work-with-github-pages",
    "title": "Git and GitHub",
    "section": "Sharing your work with GitHub Pages",
    "text": "Sharing your work with GitHub Pages\nWe’re going to wrap up today’s lesson with one of my favorite GitHub features: Pages. GitHub gives each repository it’s own website. Quarto and its predecessor, RMarkdown, can turn your work into HTML pages. By combining these two, you have a fantastic way of sharing your work with your collaborators.\n\nCreate an HTML page\n\nOpen the “myrepo” project in RStudio\nOpen myquarto.qmd\nClick “Render” at the top of the editing pane.\n\nThis should create myquarto.html and a directory called myquarto_files.\nYou just made some changes! Commit them, push them to GitHub, and check the website to make sure they show up.\n\n\nCreate a landing page in Markdown\nTo use GitHub pages you’ll need a landing page. We’ll make one in Markdown. If this is your first time with Markdown don’t worry, it’s easy.\n\nIn the Files pane, create a new blank text file and call it “index.md”. Make sure it’s not index.md.txt.\nAdd some text to index.md explaining your project. E.g. “This project is how I’m learning Git and GitHub.”\nAdd a link to your rendered Quarto document. In Markdown, links look like [text](url) . So add [My first Quarto document](myquarto.html) to index.md.\nCommit and push!\n\n\n\nTurn on GitHub Pages\nThis involves changing a setting on the GitHub website.\n\nIn your browser, go to your GitHub repo.\nGo to Settings &gt; Pages.\nUnder Branch, change “None” to “master” and hit Save. You should get a ribbon at the top that says “GitHub Pages source saved”.\nSwitch from the Settings tab to Actions. You’ll see jobs listed including “build” and “deploy”. When they’re complete (green checkmarks), navigate to [your_username].github.io/myrepo.\n\nThis is a pretty trivial example, but it’s hopefully enough to get you started. For a fully featured example, check out Blue Whales and Lagrangian Features. My colleague, James Fahlbusch, used GitHub Pages to share an R Markdown report containing the analyses and results for the first chapter of his dissertation with his co-authors and advisor. The R Markdown document eventually became the Supplemental Material for his manuscript published in Proceedings B. This is a great way to facilitate collaborations and can even make the publishing process easier!\n\n\nRecap\n\nGitHub has a built-in features to help your projects have a web presence\nPages let you share your repo as a website\nCombining Pages with literate programming (Quarto or R Markdown) is a great way to use GitHub for collaboration."
  },
  {
    "objectID": "tutorials/git-and-github.html#lesson-recap",
    "href": "tutorials/git-and-github.html#lesson-recap",
    "title": "Git and GitHub",
    "section": "Lesson recap",
    "text": "Lesson recap\n\nGit and GitHub do have a learning curve, but they help you keep your analyses organized and safe.\nUsing RStudio projects helps you integrate version control into your normal workflow (and they have other benefits too, like better file paths).\nThere are a lot of Git commands, most only usable from the command line, but you’ll get most of the benefits just from using commit and push.\nOnce you start using Git and GitHub, you’ll have access to a lot of the tools and features built on top of them. GitHub Pages are a good example, but that’s only scratching the surface."
  },
  {
    "objectID": "tutorials/git-and-github.html#resources",
    "href": "tutorials/git-and-github.html#resources",
    "title": "Git and GitHub",
    "section": "Resources",
    "text": "Resources\n\nHappy Git With R\nR 4 Data Science"
  },
  {
    "objectID": "pubs.html",
    "href": "pubs.html",
    "title": "Publications",
    "section": "",
    "text": "This publications list is generated programmatically from .bib files. Expand the folded code to see how!\n\nCode\n# Format a publication's author list\nformat_authors &lt;- function(authors) {\n  # Split authors' names (First MI Last or First Last)\n  authors_split &lt;- stringr::str_split(authors, \" \")\n  # Format as Last, FI. or Last, FI.MI.\n  # Two-word last names indicated by underscore, must be post-processed\n  sub2 &lt;- function(x, pattern, replacement) sub(pattern, replacement, x)\n  authors_formatted &lt;- purrr::map_chr(\n    authors_split,\n    function(parts) {\n      if (length(parts) == 3) {\n        sprintf(\"%s, %s.%s.\", \n                parts[3], \n                substr(parts[1], 1, 1), \n                substr(parts[2], 1, 1))\n      } else {\n        sprintf(\"%s, %s.\", \n                parts[2], \n                substr(parts[1], 1, 1))\n      }\n    }\n  ) |&gt;\n    sub2(\"_\", \" \")\n  # Shorten long author lists\n  if (length(authors_formatted) &gt; 7) {\n    authors_short &lt;- c(authors_formatted[1:5], \n                       \"...\", \n                       authors_formatted[length(authors_formatted)])\n  } else {\n    authors_short &lt;- authors_formatted\n  }\n  # Make my name bold\n  authors_short[authors_short == \"Czapanskiy, M.F.\"] &lt;- \"&lt;strong&gt;Czapanskiy, M.F.&lt;/strong&gt;\"\n  # Concatenate\n  paste(authors_short, collapse = \", \")\n}\n\n# Find path to PDF file\nfind_pdf &lt;- function(authors, year, title) {\n  if (year == \"In press\") {\n    return(NA)\n  }\n  lead_author &lt;- stringr::str_extract(authors[1], \"[^ ]+$\")\n  title_short &lt;- title |&gt;\n    stringr::str_replace_all(\"[^a-zA-Z \\\\-]\", \"\") |&gt;\n    substr(1, 30)\n  pdf_pattern &lt;- glue::glue(\"{lead_author}.*- {year} - {title_short}\")\n  dir(here::here(\"assets\", \"papers\"), \n      pattern = pdf_pattern,\n      ignore.case = TRUE) |&gt;\n    (\\(pdf) file.path(\"assets\", \"papers\", pdf))()\n}\ncreate_pdf_link &lt;- function(pdf) {\n  ifelse(is.na(pdf), \n         \"\", \n         glue::glue(\" &lt;a href=\\\"{pdf}\\\" target=\\\"_blank\\\"&gt;PDF&lt;/a&gt;\"))\n}\n\n# Read bib file\npubs &lt;- bib2df::bib2df(\"assets/works.bib\") |&gt;\n  # Retain relevant fields and format author list\n  dplyr::transmute(\n    authors = purrr::map_chr(AUTHOR, format_authors),\n    title = TITLE,\n    journal = JOURNAL,\n    year = ifelse(YEAR == 9999, \"In press\", YEAR),\n    pdf = purrr::pmap_chr(list(AUTHOR, year, TITLE), find_pdf),\n    note = ifelse(is.na(NOTE), \"\", paste0(\" \", NOTE))\n  ) |&gt;\n  # Format in HTML. Markdown doesn't support reverse ordered lists??\n  dplyr::mutate(\n    pub_html = glue::glue(\"&lt;li&gt;{authors} ({year}). {title}. &lt;em&gt;{journal}&lt;/em&gt;.{note}{create_pdf_link(pdf)}&lt;/li&gt;\")\n  ) |&gt;\n  dplyr::pull(pub_html)\n# Reverse ordered list\nc(\n  \"&lt;ol reversed&gt;\",\n  pubs,\n  \"&lt;/ol&gt;\"\n) |&gt;\n  cat()\n\n\n\nCzapanskiy, M.F., Arcila Hernández, L., Munro, C., Garfield, I., Bastidas, A., …, Beltran, R. (In press). Long-term studies should provide structure for inclusive education and professional development. Ecology Letters. *Czapanskiy and Arcila Hernández were co-lead authors on this work.\n\n\nCzapanskiy, M.F., Santora, J.A., Dietrich, K.S., Cimino, M.A., Hazen, E.L., Reiss, C.S., Veit, R.R. (2024). Sea-Ice and Macrozooplankton Distribution as Determinants of Top Predator Community Structure in Antarctic Winter. Marine Ecology Progress Series. PDF\n\n\nHazen, E.L., Savoca, M.S., Clark-Wolf, T., Czapanskiy, M.F., Rabinowitz, P.M., Abrahms, B. (2024). Ecosystem Sentinels as Early-Warning Indicators in the Anthropocene. Annual Review of Environment and Resources. PDF\n\n\nPrice, S.E., Savoca, M.S., Kumar, M., Czapanskiy, M.F., McDermott, D., …, Goldbogen, J.A. (2024). Energy Densities of Key Prey Species in the California Current Ecosystem. Frontiers in Marine Science. PDF\n\n\nKahane-Rapport, S.R., Czapanskiy, M.F., Fahlbusch, J.A., Friedlaender, A.S., Calambokidis, J., …, Savoca, M.S. (2022). Field measurements reveal exposure risk to microplastic ingestion by filter-feeding megafauna. Nature Communications. PDF\n\n\nGough, W.T., Cade, D.E., Czapanskiy, M.F., Potvin, J., Fish, F.E., …, Goldbogen, J.A. (2022). Fast and furious: energetic tradeoffs and scaling of high-speed foraging in rorqual whales. Integrative Organismal Biology. PDF\n\n\nFahlbusch, J.A., Czapanskiy, M.F., Calambokidis, J., Cade, D.E., Abrahms, B., Hazen, E.L., Goldbogen, J.A. (2022). Blue whales increase feeding rates at fine-scale ocean features. Proceedings of the Royal Society B. PDF\n\n\nNazario, E.C., Cade, D.E., Bierlich, K., Czapanskiy, M.F., Goldbogen, J.A., …, Friedlaender, A.S. (2022). Baleen whale inhalation variability revealed using animal-borne video tags. PeerJ. PDF\n\n\nCzapanskiy, M.F., Beltran, R.S. (2022). How reproducibility will accelerate discovery through collaboration in physio-logging. Frontiers in Physiology. PDF\n\n\nCzapanskiy, M.F., Ponganis, P.J., Fahlbusch, J.A., Schmitt, T.L., Goldbogen, J.A. (2022). An accelerometer-derived ballistocardiogram method for detecting heartrates in free-ranging marine mammals. Journal of Exp. Bio.. PDF\n\n\nBeltran, R.S., Yuen, A.L., Condit, R., Robinson, P.W., Czapanskiy, M.F., Crocker, D.E., Costa, D.P. (2022). Elephant seals time their long-distance migrations using a map sense. Current Biology. PDF\n\n\nSegre, P.S., Gough, W.T., Roualdes, E.A., Cade, D.E., Czapanskiy, M.F., …, Goldbogen, J.A. (2022). Scaling of maneuvering performance in baleen whales: larger whales outperform expectations. Journal of Exp. Bio.. PDF\n\n\nCade, D.E., Gough, W.T., Czapanskiy, M.F., Fahlbusch, J.A., Kahane-Rapport, S.R., …, Goldbogen, J.A. (2021). Tools for integrating inertial sensor data with video bio-loggers, including estimation of animal orientation, motion, and position. Animal Biotelemetry. PDF\n\n\nSavoca, M.S., Czapanskiy, M.F., Kahane-Rapport, S.R., Gough, W.T., Fahlbusch, J.A., …, Goldbogen, J.A. (2021). Baleen whale prey consumption based on high-resolution foraging measurements. Nature. PDF\n\n\nCzapanskiy, M.F., Savoca, M.S., Gough, W.T., Segre, P.S., Wisniewska, D.M., Cade, D.E., Goldbogen, J.A. (2021). Modelling short-term energetic costs of sonar disturbance to cetaceans using high-resolution foraging data. Journal of Applied Ecology. PDF\n\n\nGough, W.T., Smith, H.J., Savoca, M.S., Czapanskiy, M.F., Fish, F.E., …, Goldbogen, J.A. (2021). Scaling of oscillatory kinematics and Froude efficiency in baleen whales. Journal of Exp. Bio.. PDF\n\n\nWilliams, C.L., Czapanskiy, M.F., John, J.S., Leger, J.S., Scadeng, M., Ponganis, P.J. (2021). Cervical air sac oxygen profiles in diving emperor penguins: parabronchial ventilation and the respiratory oxygen store. Journal of Exp. Bio.. PDF\n\n\nGoldbogen, J.A., Cade, D.E., Wisniewska, D.M., Potvin, J., Segre, P.S., …, Pyenson, N.D. (2019). Why whales are big but not bigger: Physiological drivers and ecological limits in the age of ocean giants. Science. PDF\n\n\nGoldbogen, J.A., Cade, D.E., Calambokidis, J., Czapanskiy, M.F., Fahlbusch, J., …, Ponganis, P.J. (2019). Extreme bradycardia and tachycardia in the world’s largest animal. PNAS. PDF\n\n\nAdams, J., Felis, J.J., Czapanskiy, M.F., Carle, R., Hodum, P. (2019). Diving behavior of Pink-footed Shearwaters rearing chicks on Isla Mocha, Chile. Marine Ornithology. PDF\n\n\nKelsey, E.C., Felis, J.J., Czapanskiy, M.F., Pereksta, D.M., Adams, J. (2018). Collision and displacement vulnerability to offshore wind energy infrastructure among marine birds of the Pacific Outer Continental Shelf. Journal of Env. Mgmt.. PDF"
  },
  {
    "objectID": "posts/2023-03-09-osfr-data/index.html",
    "href": "posts/2023-03-09-osfr-data/index.html",
    "title": "Uploading data to OSF in R",
    "section": "",
    "text": "How do we keep our data and code in-sync while an analysis is in progress? This came up for me recently when my laptop went down1. All my code was in a GitHub repo, but the data were scattered across a couple Google Drive folders shared with me by collaborators. Although (Tierney and Ram 2020) give excellent advice for how to link the two after an analysis is complete and heading to publication, what should I do for a work in progress when the data are too large for GitHub or can’t be shared publicly yet?\nI’m using this as an opportunity to explore the Open Science Framework (OSF) and see if I should incorporate it into my workflow. I created a new project (private for now) and linked it to my GitHub repo. Then I tried uploading my data, which are in nested directories, and learned you can only upload files through the OSF interface, not a whole directory structure.\nNaturally I turned to R. Here’s what worked for me."
  },
  {
    "objectID": "posts/2023-03-09-osfr-data/index.html#connect-to-osf",
    "href": "posts/2023-03-09-osfr-data/index.html#connect-to-osf",
    "title": "Uploading data to OSF in R",
    "section": "Connect to OSF",
    "text": "Connect to OSF\nWe’re using the osfr package for this task. Thanks ROpenSci! The authentication vignette does a good job explaining how to get a personal access token (PAT). You can create an .Renviron file in your project repository and add your PAT with this code. Remember to replace [YOUR OSF PAT] with your actual OSF PAT!\n\nfile.create(\".Renviron\")\nwriteLines(\"OSF_PAT=[YOUR OSF PAT]\", \".Renviron\")\n\nAfter you restart your R session, you should be able to access your OSF projects."
  },
  {
    "objectID": "posts/2023-03-09-osfr-data/index.html#retrieve-your-node",
    "href": "posts/2023-03-09-osfr-data/index.html#retrieve-your-node",
    "title": "Uploading data to OSF in R",
    "section": "Retrieve your node",
    "text": "Retrieve your node\nYour OSF project is a “node” and the data files and directories within it are its child nodes. To upload files, you need a handle to the right directory. I made a directory called “data” in my OSF storage, where I’m going to upload everything.\n\nlibrary(osfr)\n\nAutomatically registered OSF personal access token\n\n# Retrieve the Antarctic Winter Communities project node\nantwincomm_prj &lt;- osf_retrieve_node(\"https://osf.io/hwnvy/\")\n# Sanity check the project and file structure\nantwincomm_prj\n\n# A tibble: 1 × 3\n  name                                                 id    meta            \n  &lt;chr&gt;                                                &lt;chr&gt; &lt;list&gt;          \n1 Antarctic Peninsula Marine Winter Predator Community hwnvy &lt;named list [3]&gt;\n\nosf_ls_files(antwincomm_prj)\n\n# A tibble: 1 × 3\n  name  id                       meta            \n  &lt;chr&gt; &lt;chr&gt;                    &lt;list&gt;          \n1 data  6407ba51e25636042723251c &lt;named list [3]&gt;\n\n# Retreive the \"data\" node\nantwincomm_files &lt;- osf_ls_files(antwincomm_prj)\nantwincomm_data &lt;- antwincomm_files[antwincomm_files$name == \"data\"]"
  },
  {
    "objectID": "posts/2023-03-09-osfr-data/index.html#upload-directory",
    "href": "posts/2023-03-09-osfr-data/index.html#upload-directory",
    "title": "Uploading data to OSF in R",
    "section": "Upload directory",
    "text": "Upload directory\nOnce you have the handle to your data directory then osf_upload() will do the rest. Tell it to include subdirectories with recurse and, if you have a lot of files, set progress to TRUE so you can keep an eye on it.\n\nlocal_data &lt;- \"path/to/your/data/here\"\nosf_upload(antwincomm_data, local_data, recurse = TRUE, progress = TRUE)"
  },
  {
    "objectID": "posts/2023-03-09-osfr-data/index.html#footnotes",
    "href": "posts/2023-03-09-osfr-data/index.html#footnotes",
    "title": "Uploading data to OSF in R",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nI can’t remember who pointed this out or where I read it, but IIRC the average hard drive lifespan is shorter than the average duration of a PhD. So make sure you keep a backup!↩︎"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/index.html",
    "href": "posts/2023-04-24-why-quarto/index.html",
    "title": "Why Quarto?",
    "section": "",
    "text": "Quarto, like its predecessor, R Markdown, is a framework for integrating code, text, figures, and more. As an implementation of literate programming1, Quarto is great for all stages of the scientific workflow! The following sections give examples of how to use Quarto for exploring data with collaborators and for communicating your science\nView as slideshow"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/index.html#exploratory-analysis-with-collaborators",
    "href": "posts/2023-04-24-why-quarto/index.html#exploratory-analysis-with-collaborators",
    "title": "Why Quarto?",
    "section": "Exploratory analysis with collaborators",
    "text": "Exploratory analysis with collaborators\nIt’s unrealistic to expect we can jump directly from data collection to the final analysis. Science in general, but especially field science with all its unpredictability, is built from iterative explorations. It’s so, so easy to lose track of what you’ve tried, why you tried it, and what did or didn’t work. Quarto is great for keeping track of your efforts and sharing them with collaborators.\nMy work on the Antarctic Winter Community project is an example of this approach. The data for this project includes environmental samples collected at stations arranged in a grid, as well as top predator sightings collected along transects between stations (Figure 1).\n\n\n\n\n\n\nFigure 1: Survey effort of the Antarctic Peninsula Winter Community project. Darker reds indicate greater transect coverage (in nautical miles), while less survey effort took place in paler purple cells.\n\n\n\nThe project structure consists of the following:\n\nA GitHub repo with the analysis code\nA directory of Quarto documents describing each stage of the exploratory analysis\nA landing page with links to the Quarto outputs\n\nFor example, the Predators Quarto document describes the predator sighting data, including a table of the five most abundant species (Figure 2).\n\n\n\n\n\n\nFigure 2: An example of a data summary in an Antarctic Peninsula Winter Community project Quarto document.\n\n\n\nI use these documents for two reasons. First, they help me park downhill. It’s common when exploring a dataset to put it down for a day, a week, or even a year while you focus on something else (field work, classes, and so on). When you resume data exploration, it takes a while to reacquaint yourself with the data and the code, and generally remember where you left off. Quarto keeps your notes and figures in the same document as the code, which helps you figure out how to jump back in. It’s like parking your car downhill: you spend less time and energy getting moving again after stopping.\nThe second reason I like using Quarto this way is these documents serve as raw material for 1-on-1 meetings with my supervisor. The day before our bi-weekly meetings, I’ll send him a project update email with links to new figures or tables. The documents keep those outputs in context with the rest of the data exploration, making it easier for my supervisor to give me in depth feedback on what I’ve done and plan next steps together. You can do the same thing a lot of other ways, like in an email thread or a running Google Doc. But I like Quarto because it means my updates are all happening in one place, rather than forcing me to update code, figures, and notes separately - which can easily get out of sync!"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/index.html#communicating-your-science",
    "href": "posts/2023-04-24-why-quarto/index.html#communicating-your-science",
    "title": "Why Quarto?",
    "section": "Communicating your science",
    "text": "Communicating your science\nI’ve shown you how Quarto documents can create reports in HTML format, for sharing online. But it has a lot of other output formats, too, including PDFs for submitting journal articles and presentation slides. In fact, this blog post doubled as a lab meeting presentation, and you can find the source code for that presentation here.\nTechnical writing (like writing a manuscript for a journal) in Quarto has a learning curve, but I think it’s worth it. Once you’ve gone through co-author edits and reviewer comments a few times, you’ll get tired of updating Fig. 2 to Fig. 3 in five different places over and over again. In Quarto, you cross-reference figures and equations with a descriptive identifier and it handles it for you. The code below generates a figure and identifies it as fig-regression. Then I can cross-reference it with @fig-regression: Figure 3. Quarto generates the figure numbers for me, I don’t have to worry about it.\n\nlibrary(tidyverse)\n\n\n```{r}\n#| label: fig-regression\n#| fig-cap: y is correlated with x, isn't that swell?\n\nset.seed(1057)\ndat &lt;- tibble(\n  x = runif(25),\n  y = 3 * x + 1 + rnorm(25)\n)\nggplot(dat, aes(x, y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x) +\n  theme_classic()\n```\n\n\n\n\n\n\n\nFigure 3: y is correlated with x, isn’t that swell?\n\n\n\n\n\nIn addition to cross-references, Quarto will take care of your bibliography, too. Let’s say I want to cite a paper from my dissertation. I look it up and find the DOI: 10.3389/fphys.2022.917976. In my Quarto document, I type @10.3389/fphys.2022.917976 and RStudio launches a window with the article details. The citation shows up like this: Czapanskiy and Beltran (2022). Quarto adds it to my bibliography file and updates my works cited list accordingly. No manually tracking citations or interfacing with a reference manager required!"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/index.html#bonus-points",
    "href": "posts/2023-04-24-why-quarto/index.html#bonus-points",
    "title": "Why Quarto?",
    "section": "Bonus points",
    "text": "Bonus points\nMaking the jump from student/post-doc to a permanent position in science is rough. A crucial, but often overlooked, part of that is establishing your professional identity (or your brand, ew gross). Quarto can help with that, too! Your research and publications are the most important part of that, but you need to market yourself, too, to a certain extent. Your personal website should bring together all the different parts of your professional identity so people can find you easily. Want to be considered for an invited talk or get an interview for a coveted job? Your website should make it easy for the decision makers to pick you. NCEAS’ Samantha Csik wrote a great tutorial on how to build a website using Quarto. An undergraduate in the Beltran Lab built their personal website using Quarto and a graduate student built a course website using it. You can do it, too! If you want help getting started, you know where to find me &lt;3."
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/index.html#recap",
    "href": "posts/2023-04-24-why-quarto/index.html#recap",
    "title": "Why Quarto?",
    "section": "Recap",
    "text": "Recap\n\nQuarto documents integrate code, text, figures, and more\nUse them to track your data analysis and collaborate with others\nAlso good for technical writing, websites, and so much more!"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/index.html#footnotes",
    "href": "posts/2023-04-24-why-quarto/index.html#footnotes",
    "title": "Why Quarto?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nLiterate programming is the practice of weaving code and its outputs together with its narrative. It has its origins in a 1984 book by influential computer scientist Don Knuth. In more recent years, its been embraced by the scientific community to bridge the gaps between data collection, data analysis, and data communication.↩︎"
  },
  {
    "objectID": "posts/2023-04-11-renew-pat/index.html",
    "href": "posts/2023-04-11-renew-pat/index.html",
    "title": "Renewing a GitHub PAT",
    "section": "",
    "text": "Generate a new token by calling usethis::create_github_token() from your R console (e.g., in RStudio). This launches GitHub in your browser. Sign in if necessary.\nYou should be at the “New personal access token” page. Change the Note to “RSTUDIO” or something similar. I like to set the Expiration to 90 days. Don’t change any of the check boxes. Scroll to the bottom and click the green “Generate token” button.\n\n\nIf you get an error saying “Note has already been taken”, call your token something else, like RSTUDIO2.\n\nYou should now see your list of tokens. The top one should be highlighted in green and look like a long string of random characters. Copy the whole thing using the copy icon just to the right of it.\n\nIf you encountered the error in step 2, use this opportunity to delete your expired “RSTUDIO” token.\n\nBack to RStudio. Again at the console, call gitcreds::gitcreds_set(). Notice you don’t give the function call any arguments, just hit enter.\n\nYou should see a prompt asking what to do with your current credentials. Choose “Replace these credentials”.\nPaste your token at the “Enter new password or token” prompt and hit enter.\n\nThat should do it!"
  },
  {
    "objectID": "posts/2023-03-17-intro-reticulate/index.html",
    "href": "posts/2023-03-17-intro-reticulate/index.html",
    "title": "Python and R together with reticulate",
    "section": "",
    "text": "Use R and Python together! Note: this lesson is for reticulate specifically. It’s not a Python lesson. But if you don’t know Python you should still be able to follow along with a friend."
  },
  {
    "objectID": "posts/2023-03-17-intro-reticulate/index.html#reticulate",
    "href": "posts/2023-03-17-intro-reticulate/index.html#reticulate",
    "title": "Python and R together with reticulate",
    "section": "",
    "text": "Use R and Python together! Note: this lesson is for reticulate specifically. It’s not a Python lesson. But if you don’t know Python you should still be able to follow along with a friend."
  },
  {
    "objectID": "posts/2023-03-17-intro-reticulate/index.html#setup",
    "href": "posts/2023-03-17-intro-reticulate/index.html#setup",
    "title": "Python and R together with reticulate",
    "section": "Setup",
    "text": "Setup\nCreate an RStudio project, then create a Quarto document.\n\nInstall Python\nSo many ways. Too many ways! Here’s one. Do this from the R console.\n\ninstall.packages(\"reticulate\")\nreticulate::install_miniconda()\n\n\n\nCreate a virtual environment\nYou likely keep all your installed R packages in one library. The standard practice in Python is to create separate environments for projects instead. Conda helps us do that. Still in the console!\n\nreticulate::conda_create(\n  \"intro-reticulate\", \n  packages = c(\"jupyter\", \"numpy\", \"pandas\", \"scikit-learn\")\n)\nreticulate::use_condaenv(\"intro-reticulate\")\nreticulate::py_config() # Are you in the right place?\n\nWe just created a Conda environment and installed some useful Python packages. jupyter is the Python equivalent to knitr, numpy lets you work with numbers, pandas lets you work with data frames, and scikit-learn is for machine learning."
  },
  {
    "objectID": "posts/2023-03-17-intro-reticulate/index.html#tidy-tuesday",
    "href": "posts/2023-03-17-intro-reticulate/index.html#tidy-tuesday",
    "title": "Python and R together with reticulate",
    "section": "Tidy Tuesday",
    "text": "Tidy Tuesday\nLearn reticulate with a Tidy Tuesday exercise. Specifically Numbats.\n\nLoad the data\nWe can do that with R. In your Quarto document, create an R code chunk and download the Tidy Tuesday data.\n\n# install.packages(\"tidytuesdayR\")\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.4.0     ✔ purrr   1.0.1\n✔ tibble  3.1.7     ✔ dplyr   1.1.0\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.2     ✔ forcats 0.5.1\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nnumbats_tidytuesday &lt;- tidytuesdayR::tt_load(2023, week = 10)\n\n--- Compiling #TidyTuesday Information for 2023-03-07 ----\n\n\n--- There is 1 file available ---\n\n\n--- Starting Download ---\n\n\n\n    Downloading file 1 of 1: `numbats.csv`\n\n\n--- Download complete ---\n\nnumbats &lt;- numbats_tidytuesday$numbats\nnumbats\n\n# A tibble: 805 × 16\n   decimalLatitude decimalLongitude eventDate           scientificName       \n             &lt;dbl&gt;            &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;                \n 1           -37.6             146. NA                  Myrmecobius fasciatus\n 2           -35.1             150. 2014-06-05 02:00:00 Myrmecobius fasciatus\n 3           -35               118. NA                  Myrmecobius fasciatus\n 4           -34.7             118. NA                  Myrmecobius fasciatus\n 5           -34.6             117. NA                  Myrmecobius fasciatus\n 6           -34.6             117. NA                  Myrmecobius fasciatus\n 7           -34.6             118. NA                  Myrmecobius fasciatus\n 8           -34.6             117. NA                  Myrmecobius fasciatus\n 9           -34.6             117. NA                  Myrmecobius fasciatus\n10           -34.6             117. NA                  Myrmecobius fasciatus\n# … with 795 more rows, and 12 more variables: taxonConceptID &lt;chr&gt;,\n#   recordID &lt;chr&gt;, dataResourceName &lt;chr&gt;, year &lt;dbl&gt;, month &lt;chr&gt;,\n#   wday &lt;chr&gt;, hour &lt;dbl&gt;, day &lt;date&gt;, dryandra &lt;lgl&gt;, prcp &lt;dbl&gt;, tmax &lt;dbl&gt;,\n#   tmin &lt;dbl&gt;\n\n\n\n\nNumbat circadian rhythms\nWere numbats sighted during the day or at night? Create another R chunk and categorize sighting time of day into day and night. The numbers look pretty even! But could environmental covariates influence that?\n\nnumbats &lt;- numbats %&gt;% \n  mutate(is_day = hour &gt;= 6 & hour &lt;= 18) %&gt;% \n  drop_na(is_day, prcp, tmax)\ncount(numbats, is_day)\n\n# A tibble: 2 × 2\n  is_day     n\n  &lt;lgl&gt;  &lt;int&gt;\n1 FALSE     31\n2 TRUE      26\n\n\n\n\nR to Python\nLet’s use Python to figure out if precipitation and temperature affects the likelihood of seeing numbats at night. Create a Python code chunk.\n\n# This is like \"library()\" in R\nfrom sklearn.linear_model import LogisticRegression\n# Use `r.___` to access R objects\nenviro = r.numbats[[\"prcp\", \"tmax\"]]\nis_day = r.numbats[\"is_day\"]\n# Fit a classifier (clf)\nclf = LogisticRegression(random_state=0).fit(enviro, is_day)\n\nWell done! You just fit a classifier in Python to data you loaded and cleaned with R. That’s pretty cool! Let’s make some predictions on a reference grid.\n\nimport numpy as np\nimport pandas as pd\nfrom sklearn.utils.extmath import cartesian\n\n# The precipitation and temperature values we want to make predictions for\nprcp = np.arange(r.numbats[\"prcp\"].min(), r.numbats[\"prcp\"].max(), 0.1)\ntmax = np.arange(r.numbats[\"tmax\"].min(), r.numbats[\"tmax\"].max(), 0.2)\n# All combinations of prcp and tmax\nref_grid = pd.DataFrame(cartesian((prcp, tmax)), columns=[\"prcp\", \"tmax\"])\n# Predict the probability of \"is_day\". predict_proba() returns two columns,\n# p(!is_day) and p(is_day). Remember `[:, 1]` gets the *second* column \n# because Python uses 0-indexing\nref_grid[\"is_day\"] = clf.predict_proba(ref_grid)[:, 1]\nref_grid\n\n       prcp  tmax    is_day\n0       0.0  13.7  0.837053\n1       0.0  13.9  0.832279\n2       0.0  14.1  0.827395\n3       0.0  14.3  0.822400\n4       0.0  14.5  0.817291\n...     ...   ...       ...\n14701  11.3  38.5  0.000025\n14702  11.3  38.7  0.000024\n14703  11.3  38.9  0.000024\n14704  11.3  39.1  0.000023\n14705  11.3  39.3  0.000022\n\n[14706 rows x 3 columns]\n\n\n\n\nPython to R\nNow we’ll use R to visualize the model predictions generated in Python. Make another R code chunk.\n\nlibrary(reticulate)\n\n# Use py$____ to get python objects\npredict_prcp &lt;- py$ref_grid %&gt;% \n  # For each precipitation value, get the prediction at the median tmax\n  group_by(prcp) %&gt;% \n  summarize(is_day = is_day[tmax = median(numbats$tmax)])\n\nnumbats %&gt;% \n  mutate(is_day = as.numeric(is_day)) %&gt;% \n  ggplot(aes(prcp, is_day)) +\n  geom_point() +\n  geom_line(data = predict_prcp) +\n  theme_classic()\n\n\n\n\n\n\n\n\nIs this a bad model? You know it! But that’s not the point."
  },
  {
    "objectID": "posts/2023-03-17-intro-reticulate/index.html#wrap-up",
    "href": "posts/2023-03-17-intro-reticulate/index.html#wrap-up",
    "title": "Python and R together with reticulate",
    "section": "Wrap up",
    "text": "Wrap up\n\nThe reticulate package connects R and Python\nPython installations are a lot more variable (and tricky!) than R\nYou can use both R and Python code, sharing data, in Quarto documents\nR -&gt; Python with r.___\nPython -&gt; R with py$___ (must library(reticulate) first!)"
  },
  {
    "objectID": "research.html",
    "href": "research.html",
    "title": "Research",
    "section": "",
    "text": "Animal-borne sensors, like GPS and accelerometers, allow remote observation of animal behavior and physiology. As these devices (bio-loggers) accumulate more and more sensors sampling at ever higher frequencies, the deluge of data becomes impossible to interpret with traditional tools. In my research, I develop new methods and software for the analysis and visualization of bio-logging data, with an emphasis on open and reproducible science practices. This page highlights my recent research and future directions."
  },
  {
    "objectID": "research.html#physiology",
    "href": "research.html#physiology",
    "title": "Research",
    "section": "Physiology",
    "text": "Physiology\n\n\n\n\n\n\n\n\n\nFig 3: A ballistocardiogram detects heart beats in motion data\n\n\n\n\nThe rumbling of a whale’s heart beat produces a physical waveform (a ballistocardiogram, or BCG), analogous to the more widely known electrocardiogram. I developed a method for extracting the BCG from standard bio-logging sensors (Czapanskiy et al. 2022), advancing our ability to monitor the physiological responses of endangered species to disturbances. I published the BCG method as a research compendium, meaning the data, code, and manuscript are all linked together in an R package available on GitHub."
  },
  {
    "objectID": "research.html#behavior",
    "href": "research.html#behavior",
    "title": "Research",
    "section": "Behavior",
    "text": "Behavior\n\n\n\n\n\n\n\n\n\nFig 4: Interactive inspection of Stickleback behavioral predictions\n\n\n\n\nWe can now observe extremely fine-scale behaviors with new high-resolution, multi-sensor bio-logging devices. Animal behavior scientists use accelerometers, microphones, and other sensors to identify individual behavioral events such as feeding and social interactions. Manually annotating behaviors in bio-logging data is a critical bottleneck and we lack computational tools for automating the process. I developed a machine learning pipeline, Stickleback, that uses time series classification algorithms to train a behavior detection model. Available in R and Python, currently in review at the Journal of Open Source Software."
  },
  {
    "objectID": "research.html#cyberinfrastructure",
    "href": "research.html#cyberinfrastructure",
    "title": "Research",
    "section": "Cyberinfrastructure",
    "text": "Cyberinfrastructure\nLike many new types of data, bio-logging lacks common tools and data standards (i.e., cyberinfrastructure). In the absence of these norms, scientists struggle to share and re-use data and code. I analyzed these challenges in bio-logging and described a future cyberinfrastructure solution based on successful efforts in other fields (Czapanskiy and Beltran 2022). My current research includes developing these tools and standards for bio-logging data, as well as educational resources to help bio-logging scientists make their science open and reproducible."
  },
  {
    "objectID": "teaching.html",
    "href": "teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "I developed and taught jese4sci to address both scientific and pedagogical challenges. The jese4sci curriculum contained the essential software engineering skills that facilitate open science, like version control and documentation (see course map below). Because most students come in with different experience levels and goals, I designed the course to be self-directed and mastery-oriented, which allowed students to move at the pace and focus on the material best suited to their growth. Here’s an example lesson and assignment from the validation track on GitHub.\n\n\n\nFig 2: jese4sci course map"
  },
  {
    "objectID": "teaching.html#the-carpentries",
    "href": "teaching.html#the-carpentries",
    "title": "Teaching",
    "section": "The Carpentries",
    "text": "The Carpentries\nI’m a certified Carpentries instructor since 2019. I’ve taught Software and Data Carpentry workshops in-person and online for the Stanford Libraries and other other organizations."
  },
  {
    "objectID": "teaching.html#research-mentorship",
    "href": "teaching.html#research-mentorship",
    "title": "Teaching",
    "section": "Research Mentorship",
    "text": "Research Mentorship\nI’m passionate about sharing my data skills with other scientists to help them develop their own abilities and make their research more impactful. I’ve mentored scientists at all career stages, from undergraduate and graduate students to post-docs and faculty. These efforts supported publications in The Journal of Experimental Biology, Nature Communications, and Current Biology. If you’d like to develop your data science skills and have a research project that you want to be more open and reproducible, please contact me!"
  },
  {
    "objectID": "teaching.html#tutorials",
    "href": "teaching.html#tutorials",
    "title": "Teaching",
    "section": "Tutorials",
    "text": "Tutorials\nI make tutorials for R and data science workshops. You’re welcome to repurpose these for your teaching.\n\nGit and GitHub\nSCRUBs Lesson for Friday March 17, 2023\nSCRUBs Lesson for Friday January 27, 2023"
  },
  {
    "objectID": "posts/2023-04-26-customizing-ggplot-legend-keys/index.html",
    "href": "posts/2023-04-26-customizing-ggplot-legend-keys/index.html",
    "title": "Customizing ggplot legend keys",
    "section": "",
    "text": "Sometimes it makes sense for your data representation in the figure to be a little different than the legend. For example, here’s a cloud of data from two clusters represented as small, semi-transparent points. The small, semi-transparent aesthetic works when you have a bunch of points next to each other, but isolated as they are in the legend the keys just look washed out.\n\nsuppressMessages(library(tidyverse))\n\n# Two sets of points with offset distributions\nn &lt;- 500\nmany_points &lt;- rbind(\n  tibble(x = runif(n, 0, 4),\n         y = 3 * x + 3 + rnorm(n, sd = 6),\n         cluster = \"A\"),\n  tibble(x = runif(n, 1, 5),\n         y = 6 * x - 6 + rnorm(n, sd = 4),\n         cluster = \"B\")\n)\n\np &lt;- ggplot(many_points, aes(x, y, color = cluster)) +\n  geom_point(alpha = 0.5) +\n  scale_color_brewer(palette = \"Accent\") +\n  theme_classic(base_size = 18) +\n  theme(legend.position = \"top\")\n\np\n\n\n\n\n\n\n\n\nManually over-riding the aesthetic to make the legend points larger and remove the transparency improves interpretation (at least in my opinion). We do that by adding guides() to the ggplot. In this case, it’s the color legend I want to change, so I set the color parameter to a new guide_legend(), which has an override.aes parameter I can use to redefine aesthetics using a list (those aesthetics being alpha and size here). I think this is much easier to interpret.\n\np +\n  guides(color = guide_legend(override.aes = list(alpha = 1, size = 3)))"
  },
  {
    "objectID": "posts/2023-10-20-customizing-ggplot-components/index.html",
    "href": "posts/2023-10-20-customizing-ggplot-components/index.html",
    "title": "Customizing ggplot components",
    "section": "",
    "text": "I’m working on the figures for a community ecology study and I want to use the same color scheme for the three communities in both geometries and text. It’s easy to assign colors to geometries, but can be harder for text. In this example, I have a bar plot faceted by community, and I want the strip labels to match the colors I use to represent the communities in other figures.\nFirst, let’s load some packages and data.\nlibrary(grid)\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──\n\n\n✔ ggplot2 3.4.2     ✔ purrr   1.0.1\n✔ tibble  3.2.1     ✔ dplyr   1.1.2\n✔ tidyr   1.3.0     ✔ stringr 1.5.0\n✔ readr   2.1.4     ✔ forcats 1.0.0\n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nstations_clust &lt;- readRDS(\"stations_clust.rds\")\nNow we create the figure without color-coding text. From top to bottom, we have three communities (Open water, Marginal ice, and Pack ice) and their sea ice coverage associations. In my other figures I’ve color-code their geometries as green, orange, and purple. I’d like to make my facet strip labels use the same colors here.\nmedian_coverge &lt;- stations_clust %&gt;%\n  drop_na(ice_coverage) %&gt;%\n  group_by(pred_clust) %&gt;%\n  summarize(median_ice = median(ice_coverage / 10, na.rm = TRUE))\n\np &lt;- stations_clust %&gt;% \n  drop_na(ice_coverage) %&gt;% \n  ggplot(aes(x = ice_coverage / 10, fill = after_stat(x))) +\n  geom_histogram(bins = 20, color = \"grey30\") +\n  geom_vline(aes(xintercept = median_ice),\n             median_coverge,\n             color = \"red\", linetype = \"dashed\") +\n  scale_x_continuous(labels = scales::percent) +\n  scale_fill_distiller(palette = \"Blues\", guide = NULL) +\n  facet_grid(rows = vars(pred_clust)) +\n  labs(x = \"Ice coverage\",\n       y = \"# sites\") +\n  theme_minimal(base_size = 14) +\n  theme(strip.text = element_text(face = \"bold\"))\np\nggplot will let me format all the facet strip labels using theme(), however individually formatting them is unsupported (as far as I’m aware). So we’re going to look into the ggplot object’s guts and manually adjust things. Here’s how that works."
  },
  {
    "objectID": "posts/2023-10-20-customizing-ggplot-components/index.html#force-ggplot-to-generate-the-plot",
    "href": "posts/2023-10-20-customizing-ggplot-components/index.html#force-ggplot-to-generate-the-plot",
    "title": "Customizing ggplot components",
    "section": "Force ggplot to generate the plot",
    "text": "Force ggplot to generate the plot\nCalling ggplot() only defines the plot at a relatively high level. We need ggplot to actually generate all the plot elements (axes, geometries, legends, etc) before we can start mucking around with them. We do that by calling the grid package’s grid.force() on the plot’s grob (ggplot lingo for a graphical object).\n\ng &lt;- p %&gt;% \n  ggplotGrob() %&gt;% \n  grid.force()\n\nNotice ggplot and grob objects are different classes.\n\nclass(ggplot())\n\n[1] \"gg\"     \"ggplot\"\n\nclass(ggplotGrob(ggplot()))\n\n[1] \"gtable\" \"gTree\"  \"grob\"   \"gDesc\""
  },
  {
    "objectID": "posts/2023-10-20-customizing-ggplot-components/index.html#find-the-relevant-grobs",
    "href": "posts/2023-10-20-customizing-ggplot-components/index.html#find-the-relevant-grobs",
    "title": "Customizing ggplot components",
    "section": "Find the relevant grobs",
    "text": "Find the relevant grobs\nNow we can look inside to see how ggplot is rendering the facet strip labels and start changing the graphical parameters (like color). The grobs within the plot are arranged in a tree-like structure. For example, legend labels are part of the legend are part of the overall layout. So each grob has both a name (the leaf of the tree) and a path (the sequence of branches leading to the leaf). Extract those like this.\n\n# Get the names and paths of grobs\ngrob_ls &lt;- grid.ls(g, print = FALSE)\ngrob_names &lt;- grob_ls$name\ngrob_paths &lt;- grob_ls$gPath\n\nIf you examine grob_paths you’ll get an idea of how the paths are structured. Here we see 18 grobs contain the word “strip” in the path. I’ve appended the grob names at the end to show the grob leaf and branches together.\n\ncontains_strip &lt;- str_detect(grob_paths, \"strip\")\npaste(grob_paths[contains_strip], grob_names[contains_strip], sep = \"::\")\n\n [1] \"layout::strip-r-1.7-6-7-6::strip\"                                                                                    \n [2] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1\"                                                                     \n [3] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199\"                                                    \n [4] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199::strip.background.y..zeroGrob.197\"                  \n [5] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199::strip.text.y.right..titleGrob.190\"                 \n [6] \"layout::strip-r-1.7-6-7-6::strip::strip.1-1-1-1::strip.gTree.199::strip.text.y.right..titleGrob.190::GRID.text.188\"  \n [7] \"layout::strip-r-2.9-6-9-6::strip\"                                                                                    \n [8] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1\"                                                                     \n [9] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201\"                                                    \n[10] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201::strip.background.y..zeroGrob.197\"                  \n[11] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201::strip.text.y.right..titleGrob.193\"                 \n[12] \"layout::strip-r-2.9-6-9-6::strip::strip.1-1-1-1::strip.gTree.201::strip.text.y.right..titleGrob.193::GRID.text.191\"  \n[13] \"layout::strip-r-3.11-6-11-6::strip\"                                                                                  \n[14] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1\"                                                                   \n[15] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203\"                                                  \n[16] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203::strip.background.y..zeroGrob.197\"                \n[17] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203::strip.text.y.right..titleGrob.196\"               \n[18] \"layout::strip-r-3.11-6-11-6::strip::strip.1-1-1-1::strip.gTree.203::strip.text.y.right..titleGrob.196::GRID.text.194\"\n\n\nThese grobs include the three strip parents ([1], [7], and [13]), each of which has multiple children. The grob that actually contains the graphical parameters we want to edit have name like “GRID.text.*” (which I only figured out through trial and error, that’s not immediately obvious)."
  },
  {
    "objectID": "posts/2023-10-20-customizing-ggplot-components/index.html#edit-the-grobs",
    "href": "posts/2023-10-20-customizing-ggplot-components/index.html#edit-the-grobs",
    "title": "Customizing ggplot components",
    "section": "Edit the grobs",
    "text": "Edit the grobs\nKnowing where the grobs we want to change are, we can change their graphical parameters.\n\n# This gets the names of the GRID.text grobs for the strip titles\nstrip_names &lt;- str_subset(\n  grob_names[str_detect(grob_paths, \"strip.text.*titleGrob\")],\n  \"GRID.text\"\n)\n\n# I want to change the colors of the strip titles to match the Dark2 palette\ntxt_colors &lt;- RColorBrewer::brewer.pal(3, \"Dark2\")\nfor (i in 1:3) {\n  # THIS IS THE KEY PART\n  g &lt;- editGrob(grob = g,\n                # Even though the parameter is called gPath, you just give it\n                # the grob's name.\n                gPath = strip_names[i], \n                # Use gpar() to change the graphical parameter\n                gp = gpar(col = txt_colors[i]))\n}"
  },
  {
    "objectID": "posts/2023-10-20-customizing-ggplot-components/index.html#success",
    "href": "posts/2023-10-20-customizing-ggplot-components/index.html#success",
    "title": "Customizing ggplot components",
    "section": "Success!",
    "text": "Success!\nNow the colors of my strip label text match the other figures in my paper.\n\ngrid.draw(g)"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#why-quarto",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#why-quarto",
    "title": "Why Quarto?",
    "section": "Why Quarto?",
    "text": "Why Quarto?\nI barely wrapped my head around R Markdown. Now I have to learn something new?"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#its-just-friendlier",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#its-just-friendlier",
    "title": "Why Quarto?",
    "section": "It’s just friendlier",
    "text": "It’s just friendlier\n\nBackwards compatible (most everything you learned still works)\nConsistent syntax (smooths over some weird R Markdown bumps)\nMulti-language support (if that applies to you in the future)"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#context-literate-programming",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#context-literate-programming",
    "title": "Why Quarto?",
    "section": "Context: literate programming",
    "text": "Context: literate programming\n\nCombine text, code, and outputs (figures etc). Great for scientific analysis!\nUseful for all stages of the scientific analysis pipeline\n\nExploratory analysis (with collaborators!)\nTechnical writing (like cross-references and citations!)\nScience communication (websites and more!)"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#exploratory-analysis-with-collaborators",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#exploratory-analysis-with-collaborators",
    "title": "Why Quarto?",
    "section": "Exploratory analysis (with collaborators!)",
    "text": "Exploratory analysis (with collaborators!)\n\n\nProject structure:\n\nA GitHub repo\nA directory of Quarto documents\nA landing page"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#exploratory-analysis-with-collaborators-1",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#exploratory-analysis-with-collaborators-1",
    "title": "Why Quarto?",
    "section": "Exploratory analysis (with collaborators!)",
    "text": "Exploratory analysis (with collaborators!)\n\n\nPark downhill\n\nYou’re going to take breaks\nQuarto keeps your notes, code, and figures in sync\nJump back in faster!\n\n\nProductive 1-on-1 and team meetings\n\nSend an email with links to updates\nKeep progress in context\nMore in depth feedback, better planning"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#communicating-your-science-technical-writing",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#communicating-your-science-technical-writing",
    "title": "Why Quarto?",
    "section": "Communicating your science (technical writing)",
    "text": "Communicating your science (technical writing)\n\n\n\nCreate a figure in code\nGive it a name e.g., fig-regression\nCross-reference it with @fig-regression\nQuarto turns it into Figure 1\n\n\n\n```{r}\n#| label: fig-regression\n#| fig-cap: y is correlated with x, isn't that swell?\n\nset.seed(1057)\ndat &lt;- tibble(\n  x = runif(25),\n  y = 3 * x + 1 + rnorm(25)\n)\nggplot(dat, aes(x, y)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", formula = y ~ x) +\n  theme_classic()\n```\n\n\n\n\n\n\n\nFigure 1: y is correlated with x, isn’t that swell?"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#communicating-your-science-references",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#communicating-your-science-references",
    "title": "Why Quarto?",
    "section": "Communicating your science (references)",
    "text": "Communicating your science (references)\n\n\n\nLook up the DOI\nUse RStudio crossref lookup\nTurn @10.3389/fphys.2022.917976\nInto Czapanskiy and Beltran (2022)"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#bonus",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#bonus",
    "title": "Why Quarto?",
    "section": "Bonus!",
    "text": "Bonus!\n\nMake a personal website to showcase your research\nOr a course website for your teaching portfolio\nExcellent tutorial by Samantha Csik"
  },
  {
    "objectID": "posts/2023-04-24-why-quarto/why-quarto-slides.html#refs",
    "href": "posts/2023-04-24-why-quarto/why-quarto-slides.html#refs",
    "title": "Why Quarto?",
    "section": "Refs",
    "text": "Refs\n\n\nCzapanskiy, Max F., and Roxanne S. Beltran. 2022. “How Reproducibility Will Accelerate Discovery Through Collaboration in Physio-Logging.” Frontiers in Physiology 13 (July). https://doi.org/10.3389/fphys.2022.917976."
  },
  {
    "objectID": "posts/2023-06-20-project-organization/index.html",
    "href": "posts/2023-06-20-project-organization/index.html",
    "title": "A simple project organization workflow",
    "section": "",
    "text": "Reproducibility. You or another scientist should be able to repeat your analysis.\nMaintainability. You should be able to jump back in to editing your analysis, even if you haven’t looked at it in a while.\nCollaboration. You should be able to share your analysis methods and results with others.\n\nThose principles sound nice, but how do we actually implement them in practice? You’ve probably been told to “comment your code”, but that’s insufficient guidance. Inspired by the British Ecological Society’s A Guide to Reproducible Code in Ecology and Evolution, this post walks you through the basics of setting up your project for success.\n\n\n\n\nThe virtues of version control for scientists have been well covered by others (10.1371/journal.pcbi.1005510, 10.1080/00031305.2017.1399928). The core functionality of GitHub is version control, but there are even more reasons scientists should adopt it. I strongly recommend reading Braga et al. (2023) for more details. For now, I want to emphasize a feature I use all the time for collaboration: website hosting. Every GitHub repository gets an associated website, which you can combine with authoring tools like R Markdown and Quarto to easily share project reports. This is my primary method for sharing progress with collaborators and it’s so easy to do.\n\n\n\nIt’s less important which system you pick than it is to stick with it. I use the system recommended by Annna Krystalli in the Organising projects for reproducibility chapter of the BES guide, with a few edits. Some of the following comes from there verbatim.\n\nThe data folder contains all input data (and metadata) used in the analysis.\nThe paper folder contains the manuscript.\nThe figs directory contains figures generated by the analysis.\nThe output folder contains any type of intermediate or output files (e.g. simulation outputs, models, processed datasets, etc.). You might separate this and also have a cleaned-data folder.\nThe R directory contains R scripts with function definitions.\nThe reports folder contains Quarto files that document the analysis or report on results.\nThe docs folder contains the rendered versions of the reports.\nThe scratch folder contains early prototypes and other code I don’t fully understand.\nThe scripts that actually do things are stored in the root directory, but if your project has many scripts, you might want to organize them in a directory of their own.\n\n\n\n\nA file organization system for your analyses.\n\n\nThe biggest benefit of adopting this system is the cognitive space it frees up in your brain. Any brainpower you were devoting to figuring out where to put a file or where to find something can now be reallocated to your actual science.\nAs an added benefit, you’ll also do away with absolute path errors. If your code contains absolute file paths, like /Users/YourNameHere/Documents/MyThesis/…, then it won’t work on another machine. That violates reproducibility and makes collaboration difficult! This system keeps your analysis in one folder and uses RStudio projects, which means you’ll be using relative file paths. R will look for files relative to the .Rproj file, so e.g. data/surveys/forest.csv refers to the same file on any computer.\n\n\n\nNever touch your raw data. Ever. Seriously. Smarter people than us say so (10.1080/00031305.2017.1375989). Put your raw data and all the metadata you need to use it in data/ and make any edits you need in code. You can save out the changed versions to output/. It might seem easier to open up Excel to add a column or change a cell. Don’t be tempted. Only madness lies down that path.\n\n\n\nIf you use R or Python, learn Quarto. In a single document, you’ll interweave text, code, figures, and tables. This is the best way to track your progress and share it with others. Quarto documents will create HTML outputs that you can share on your project’s website through GitHub. Here’s an example from one of my projects. Even though my supervisor doesn’t use GitHub, they can still see my project’s progress and give me feedback. This is so much better than tangled email threads! It also helps gets new collaborators up to speed and you can reuse large chunks when you’re writing your manuscript."
  },
  {
    "objectID": "posts/2023-06-20-project-organization/index.html#guiding-principles",
    "href": "posts/2023-06-20-project-organization/index.html#guiding-principles",
    "title": "A simple project organization workflow",
    "section": "",
    "text": "Reproducibility. You or another scientist should be able to repeat your analysis.\nMaintainability. You should be able to jump back in to editing your analysis, even if you haven’t looked at it in a while.\nCollaboration. You should be able to share your analysis methods and results with others.\n\nThose principles sound nice, but how do we actually implement them in practice? You’ve probably been told to “comment your code”, but that’s insufficient guidance. Inspired by the British Ecological Society’s A Guide to Reproducible Code in Ecology and Evolution, this post walks you through the basics of setting up your project for success."
  },
  {
    "objectID": "posts/2023-06-20-project-organization/index.html#use-github",
    "href": "posts/2023-06-20-project-organization/index.html#use-github",
    "title": "A simple project organization workflow",
    "section": "",
    "text": "The virtues of version control for scientists have been well covered by others (10.1371/journal.pcbi.1005510, 10.1080/00031305.2017.1399928). The core functionality of GitHub is version control, but there are even more reasons scientists should adopt it. I strongly recommend reading Braga et al. (2023) for more details. For now, I want to emphasize a feature I use all the time for collaboration: website hosting. Every GitHub repository gets an associated website, which you can combine with authoring tools like R Markdown and Quarto to easily share project reports. This is my primary method for sharing progress with collaborators and it’s so easy to do."
  },
  {
    "objectID": "posts/2023-06-20-project-organization/index.html#pick-a-folder-organization-system",
    "href": "posts/2023-06-20-project-organization/index.html#pick-a-folder-organization-system",
    "title": "A simple project organization workflow",
    "section": "",
    "text": "It’s less important which system you pick than it is to stick with it. I use the system recommended by Annna Krystalli in the Organising projects for reproducibility chapter of the BES guide, with a few edits. Some of the following comes from there verbatim.\n\nThe data folder contains all input data (and metadata) used in the analysis.\nThe paper folder contains the manuscript.\nThe figs directory contains figures generated by the analysis.\nThe output folder contains any type of intermediate or output files (e.g. simulation outputs, models, processed datasets, etc.). You might separate this and also have a cleaned-data folder.\nThe R directory contains R scripts with function definitions.\nThe reports folder contains Quarto files that document the analysis or report on results.\nThe docs folder contains the rendered versions of the reports.\nThe scratch folder contains early prototypes and other code I don’t fully understand.\nThe scripts that actually do things are stored in the root directory, but if your project has many scripts, you might want to organize them in a directory of their own.\n\n\n\n\nA file organization system for your analyses.\n\n\nThe biggest benefit of adopting this system is the cognitive space it frees up in your brain. Any brainpower you were devoting to figuring out where to put a file or where to find something can now be reallocated to your actual science.\nAs an added benefit, you’ll also do away with absolute path errors. If your code contains absolute file paths, like /Users/YourNameHere/Documents/MyThesis/…, then it won’t work on another machine. That violates reproducibility and makes collaboration difficult! This system keeps your analysis in one folder and uses RStudio projects, which means you’ll be using relative file paths. R will look for files relative to the .Rproj file, so e.g. data/surveys/forest.csv refers to the same file on any computer."
  },
  {
    "objectID": "posts/2023-06-20-project-organization/index.html#raw-data-are-sacrosanct",
    "href": "posts/2023-06-20-project-organization/index.html#raw-data-are-sacrosanct",
    "title": "A simple project organization workflow",
    "section": "",
    "text": "Never touch your raw data. Ever. Seriously. Smarter people than us say so (10.1080/00031305.2017.1375989). Put your raw data and all the metadata you need to use it in data/ and make any edits you need in code. You can save out the changed versions to output/. It might seem easier to open up Excel to add a column or change a cell. Don’t be tempted. Only madness lies down that path."
  },
  {
    "objectID": "posts/2023-06-20-project-organization/index.html#share-reports",
    "href": "posts/2023-06-20-project-organization/index.html#share-reports",
    "title": "A simple project organization workflow",
    "section": "",
    "text": "If you use R or Python, learn Quarto. In a single document, you’ll interweave text, code, figures, and tables. This is the best way to track your progress and share it with others. Quarto documents will create HTML outputs that you can share on your project’s website through GitHub. Here’s an example from one of my projects. Even though my supervisor doesn’t use GitHub, they can still see my project’s progress and give me feedback. This is so much better than tangled email threads! It also helps gets new collaborators up to speed and you can reuse large chunks when you’re writing your manuscript."
  },
  {
    "objectID": "posts/2024-01-22-rphylopic-challenge/index.html",
    "href": "posts/2024-01-22-rphylopic-challenge/index.html",
    "title": "rphylopic challenge",
    "section": "",
    "text": "Data visualization challenge! We’re going to use rphylopic (Gearty and Jones 2023) to find silhouettes of our study species and add them to a ggplot figure.\nFor this challenge, you’ll need the following packages:\nMake sure to install any you don’t have."
  },
  {
    "objectID": "posts/2024-01-22-rphylopic-challenge/index.html#the-challenge",
    "href": "posts/2024-01-22-rphylopic-challenge/index.html#the-challenge",
    "title": "rphylopic challenge",
    "section": "The challenge",
    "text": "The challenge\n\nLoad packages and data\nlibrary(rphylopic)\nlibrary(tidyverse)\nlibrary(wiqid)\ndata(KillarneyBirds)\n\n\nTidy the data\nExplore the data, e.g., with view() or glimpse(). Notice how the bird names aren’t in their own column? Use tibble::rownames_to_column() to fix that.\n\n\nFind silhouettes\nFind silhouettes for the chaffinch, robin, and blue tit. Use rphylopic::pick_phylopic(). This is an interactive way to find silhouettes for your study species.\n\n\nCreate figure\n\nPlot chaffinch, robin, and blue tit abundances in Yew habitat. Use a column plot and theme_classic(). For your column fills, use chaffinch = #9D6C56, robin = #AE7834, and blue tit = #263765. Hint: use scale_fill_manual().\nAdd phylopics on inside top of columns. Make them white so they stand out. Use rphylopic::add_phylopic().\n\nHint 1: use parameters x, y, ysize, and fill\nHint 2: You can use text for x position and you can calculate y position from the data.\n\nThat’s about it! To clean it up, rename the x-axis to “Bird” and remove the legend."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Max Czapanskiy",
    "section": "",
    "text": "My work advances ecological data science at multiple scales. I teach scientists how to use software engineering principles to make the most of their data, I develop tools for visualizing and analyzing big data, and I advocate for open science practices and policies.\nCurrently, I’m a postdoctoral scholar with NOAA’s Southwest Fisheries Science Center and UC Santa Cruz’s Ocean Sciences Department. In this role, I’m developing new software and publishing data to support marine resource management in California and the Antarctic. During my graduate studies, I created and taught a course called Just Enough Software Engineering (for Scientists) for the Stanford Biosciences Program. I also developed novel computational methods for deciphering biological signals in animal-borne sensor data (featured in Vox)."
  },
  {
    "objectID": "about.html#education",
    "href": "about.html#education",
    "title": "Max Czapanskiy",
    "section": "Education",
    "text": "Education\nStanford University | Stanford, CA\nPhD in Biology | 2022\nSan Francisco State University | San Francisco, CA\nMS in Geographic Information Science | 2018\nColumbia University | New York, NY\nBS in Computer Science | 2014"
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Animal orientation with IMU tags\n\n\n\nbiologging\n\n\n\nDerivations of formulas for estimating pitch, roll, and heading of an animal from a tag with an accelerometer and magnetometer.\n\n\n\nMax Czapanskiy\n\n\nAug 30, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nrphylopic challenge\n\n\n\nR\n\n\nggplot\n\n\ndataviz\n\n\nchallenges\n\n\n\nA data visualization challenge that uses rphylopic to add animal silhouettes to ggplot figures.\n\n\n\nMax Czapanskiy\n\n\nJan 22, 2024\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing ggplot components\n\n\n\nR\n\n\nggplot\n\n\ndataviz\n\n\n\nggplot commands are good for 99% of figure customizations, but sometimes you need to edit individual plot components manually. Here’s how.\n\n\n\nMax Czapanskiy\n\n\nOct 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\nA simple project organization workflow\n\n\n\nsoft skills; RStudio; GitHub\n\n\n\nKeeping code, data, and manuscripts organized is a notorious challenge for scientists. This workflow will get you started with some early project organization wins that help…\n\n\n\nMax Czapanskiy\n\n\nJun 20, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCustomizing ggplot legend keys\n\n\n\nR\n\n\nggplot\n\n\ndataviz\n\n\n\nFor when you want e.g. small points on the plot but large keys in the legend\n\n\n\nMax Czapanskiy\n\n\nApr 26, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Quarto?\n\n\n\nR\n\n\nQuarto\n\n\n\nUse quarto documents for reproducible analyses, science communication, and more!\n\n\n\nMax Czapanskiy\n\n\nApr 24, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nRenewing a GitHub PAT\n\n\n\nR\n\n\ngit\n\n\nGitHub\n\n\n\nWhat to do when your GitHub personal access token (PAT) expires.\n\n\n\nMax Czapanskiy\n\n\nApr 11, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPython and R together with reticulate\n\n\n\nR\n\n\nPython\n\n\nreticulate\n\n\nSCRUBs\n\n\n\nIntro to reticulate lesson for SCRUBs\n\n\n\nMax Czapanskiy\n\n\nMar 17, 2023\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUploading data to OSF in R\n\n\n\nR\n\n\nOSF\n\n\nreproducibility\n\n\n\nI’m learning to navigate the Open Science Framework (OSF), but ran into issues uploading a directory to my project. Here’s how I did it in R.\n\n\n\nMax Czapanskiy\n\n\nMar 9, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html",
    "title": "Animal orientation with IMU tags",
    "section": "",
    "text": "Every 6-18 months, my friend Jessie and I try to remember the linear algebra required to estimate animal orientation (pitch, roll, heading) from an accelerometer/magnetometer tag. This usually involves a 2-3 hour Zoom call, frantic whiteboard activity, and moderate hair loss. In the hopes of breaking this stressful cycle, here are my notes about the subject."
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#reference-frames",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#reference-frames",
    "title": "Animal orientation with IMU tags",
    "section": "Reference frames",
    "text": "Reference frames\nA major source of confusion is often the reference frame. We’re going to describe orientation as a rotation. The reference frame describes what it’s a rotation from. A pitch of 45° means something intuitively (facing halfway from the horizon to straight up), but mathematically it only has meaning if we specify what we’re pitching 45° relative to. Enter reference frames.\nWe use three reference frames, which we call \\(\\Psi\\). One for the world at large (AKA navigation, \\(\\Psi^n\\)), one for the animal’s body (\\(\\Psi^a\\)), and a third for the tag (\\(\\Psi^t\\)).\n\\[\n\\begin{align}\n\\Psi^n &= \\begin{bmatrix}\nN ~ E ~ D\n\\end{bmatrix} \\\\\n\\Psi^a &= \\begin{bmatrix}\nX^a ~ Y^a ~ Z^a\n\\end{bmatrix} \\\\\n\\Psi^t &= \\begin{bmatrix}\nX^t ~ Y^t ~ Z^t\n\\end{bmatrix}\n\\end{align}\n\\]\nWhere \\(N\\), \\(E\\), and \\(D\\) represent the vectors for north, east, and down, respectively. \\(X^a\\) is the longitudinal axis of the animal (along the spine), \\(Y^a\\) is the transverse axis (left to right), and \\(Z^a\\) is the dorso-ventral axis. Same for \\(X^t\\), \\(Y^t\\), \\(Z^t\\), but for the tag instead of the animal.\nBecause the vectors \\(N\\), \\(X^a\\), etc are 3x1, these reference frames are all 3x3 matrices. When we align with their point of view, we define them to be the identity matrix, \\(I\\).\n\n\n\n\n\n\nNote\n\n\n\n\\(\\Psi^n\\) is controversial within the animal tagging community. A conventional right-hand rule reference frame would be \\(\\begin{bmatrix} N ~ W ~ U \\end{bmatrix}\\), not \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\). Hold your hand out and stick out your thumb and first two fingers all at right angles (pointer forward, thumb up, middle finger left). Let your pointer be \\(N\\), your middle finger be \\(W\\), and your thumb be \\(U\\). Notice how comfortable that is? Unfortunately, the math makes it such that positive pitch means down in this orientation. Most people find that counter-intuitive. We have two options to change that: adopt a left-hand rule system \\(\\begin{bmatrix} N ~ E ~ U \\end{bmatrix}\\) or an “upside down” right-hand rule \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\). Within the marine vertebrate research community, there’s a split. Some use the left-hand rule \\(\\begin{bmatrix} N ~ E ~ U \\end{bmatrix}\\) (TODO: cite 10.1109/JOE.2002.808212) and others the upside-down right-hand rule \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\) (TODO: cite 10.1186/s40317-021-00256-w). I find keeping the right-hand rule makes more sense to me personally, so that’s what I’ll use here."
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#rotation-matrices",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#rotation-matrices",
    "title": "Animal orientation with IMU tags",
    "section": "Rotation matrices",
    "text": "Rotation matrices\nRotations are defined using Euler angles: the familiar pitch, roll, and heading. We define two important rotation matrices: \\(\\boldsymbol{Q}\\) and \\(\\boldsymbol{W}\\).\n\\(\\boldsymbol{Q}\\) is the rotation matrix describing the orientation of the animal frame relative to the navigation frame.\n\\[\n\\Psi^a = \\Psi^n \\boldsymbol{Q}\n\\]\nThat’s often tricky to understand, so I’ll repeat it. Our estimate of the animal’s body orientation is a rotation matrix. \\(\\boldsymbol{Q}\\) itself is the product of three other rotation matrices, which define the pitch, roll, and heading of the animal. Therefore, \\(\\boldsymbol{Q}\\) is a biologically meaningful variable that we’re interested in studying.\n\\(\\boldsymbol{W}\\) is the rotation matrix describing the animal’s orientation relative to the tag.\n\\[\n\\Psi^a = \\Psi^t \\boldsymbol{W}\n\\]\nLike \\(\\boldsymbol{Q}\\), \\(\\boldsymbol{W}\\) is the product of three rotations, which yaw, pitch, and roll the tag relative to the animal. Unlike \\(\\boldsymbol{Q}\\), \\(\\boldsymbol{W}\\) is not biologically meaningful. However, we need \\(\\boldsymbol{W}\\) to figure out \\(\\boldsymbol{Q}\\) because we can’t measure \\(\\boldsymbol{Q}\\) directly.\nWhat does a rotation matrix actually look like? There are three we use often, which are the rotations around the reference frame axes themselves. Hold out your hand in \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\) orientation. Rotate forward to pitch your pointer down. Which axis did you rotate around? Your thumb is pointing in a new direction, too, but your middle finger (which represents \\(E\\), the y-axis) is still pointing to the right. So we see pitch is a rotation around the y-axis. The same is also true for roll (around the x-axis) and yaw (around the z-axis). Mathematically, they look like this:\n\\[\n\\begin{align}\nY(\\gamma) &= \\begin{bmatrix}\ncos ~ \\gamma & -sin ~ \\gamma & 0 \\\\\nsin ~ \\gamma & cos ~ \\gamma & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nP(p) &= \\begin{bmatrix}\ncos ~ p & 0 & sin ~ p \\\\\n0 & 1 & 0 \\\\\n-sin ~ p & 0 & cos ~ p\n\\end{bmatrix} \\\\\nR(r) &= \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r & -sin ~ r \\\\\n0 & sin ~ r & cos ~ r\n\\end{bmatrix}\n\\end{align}\n\\]\nWhere \\(Y\\), \\(P\\), and \\(R\\) are the yaw, pitch, and roll matrices, respectively. \\(\\gamma\\), \\(p\\), and \\(r\\) are the yaw, pitch, and roll angles themselves. They’re not symmetrical matrices, which means matrix multiplication won’t be commutative, so order matters. We always apply them in the order \\(YPR\\). This has the effect of rotating around the local axes, those of the thing itself being rotated. The reverse order, \\(RPY\\) applies the rotations relative to the global axes. If that doesn’t makes sense don’t worry about it, just remember for \\(Q\\) and \\(W\\) we always rotate in the order \\(YPR\\)."
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#accelerometers-gravity-pitch-and-roll",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#accelerometers-gravity-pitch-and-roll",
    "title": "Animal orientation with IMU tags",
    "section": "Accelerometers, gravity, pitch, and roll",
    "text": "Accelerometers, gravity, pitch, and roll\n\nWhat do accelerometers measure?\nAccelerometers measure acceleration. Acceleration can mean a few different things, and the particular kind of acceleration measured by accelerometers is not the intuitive one for most of us.\nImagine a tag at rest on a table. Is it accelerating? Instinctively, we think of acceleration relative to a coordinate system. And since the tag’s position isn’t changing, we would say it isn’t accelerating. However, an accelerometer would measure an acceleration of 9.8 m s-2 straight down. Similarly, if we went to the top of a tower and dropped a tag, we would observe it accelerating at 9.8 m s-2 straight down, but the accelerometer would read 0.\nThese counter-intuitive readings are because accelerometers measure proper acceleration, which is relative to the inertial frame of reference. We don’t need to dive into the precise physics of inertial reference frames. In short, here’s the intuition that will help: the accelerometer readings are relative to an object in free fall.\n\n\nEstimating pitch and roll\nWe can use the accelerometer readings to detect the pitch and roll of an object at rest. At rest, the only force is gravity, which is aligned downwards, along \\(D\\). So the acceleration measured by the tag is:\n\\[\nA^t = g D^T \\Psi^t\n\\]\nWhere \\(A^t\\) is the 1x3 vector of accelerometer readings \\(\\begin{bmatrix} a_x ~ a_y ~ a_z \\end{bmatrix}\\). \\(g\\) is the strength of gravitational acceleration (about 9.8 m s-2). Notice the T in \\(D^T\\) is capitalized. We use lower case \\(t\\) to indicate something to do with the tag e.g., \\(\\Psi^t\\). Capital T here means we’re transposing the column vector representing “down” into a row vector. That just makes the math easier.\nWe have a problem here, though. \\(A^t\\) is measured in the tag’s reference frame (hence the \\(\\Psi^t\\)), but down \\(D^T\\) is defined in the navigation frame. Let’s pretend for a second the tag frame is aligned with the animal frame (i.e., \\(\\Psi^a = \\Psi^t\\)) . Then, recall our reference frame definition \\(\\Psi^a = \\Psi^n Q\\). Substituting that in, we get:\n\\[\n\\begin{align}\nA^t &= g D^T \\Psi^t \\\\\nA^t &= g D^T \\Psi^n Q \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix}Q\n\\end{align}\n\\]That works because, by definition, \\(D^T \\Psi^n = \\begin{bmatrix}0 ~ 0 ~ 1\\end{bmatrix}\\). That’s how we defined “down” in the navigational reference frame.\nNow recall the rotation matrices for yaw, pitch, and roll, and that \\(Q\\) is the composition of those three. When we substitute in \\(Y\\), \\(D\\) will just cancel it out. This should make sense intuitively: gravity’s effect on your acceleration is the same whether you face north, south, east, or west. Then we can solve for \\(A^t\\) based on \\(P\\) and \\(R\\).\n\\[\n\\begin{align}\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} Q \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} Y(\\gamma) P(p) R(r) \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} \\begin{bmatrix}\ncos ~ \\gamma & -sin ~ \\gamma & 0 \\\\\nsin ~ \\gamma & cos ~ \\gamma & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} P(p) R(r) \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} P(p) R(r) \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} \\begin{bmatrix}\ncos ~ p & 0 & sin ~ p \\\\\n0 & 1 & 0 \\\\\n-sin ~ p & 0 & cos ~ p\n\\end{bmatrix} \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r & -sin ~ r \\\\\n0 & sin ~ r & cos ~ r\n\\end{bmatrix} \\\\\nA^t &= g \\begin{bmatrix} -sin~p & 0 & cos~p \\end{bmatrix} \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r & -sin ~ r \\\\\n0 & sin ~ r & cos ~ r\n\\end{bmatrix} \\\\\nA^t &= g \\begin{bmatrix} -sin~p & -cos~p~sin~r & -cos~p~cos~r \\end{bmatrix}  \\\\\n\\end{align}\n\\]\nNow we can solve for \\(p\\) and \\(r\\), our pitch and roll. We’ll call them \\(\\hat{p}\\) and \\(\\hat{r}\\) to indicate they’re estimates. First, \\(p\\):\n\\[\n\\begin{align}\na_x &= -g ~ sin ~ \\hat{p} \\\\\nsin ~ \\hat{p} &= \\frac{a_x}{-g} \\\\\n\\hat{p} &= -sin^{-1} \\frac{a_x}{g}\n\\end{align}\n\\]\nNote: remember \\(sin ~ {-x} = -sin ~ x\\). The formula for \\(\\hat{p}\\) is correct for an object at rest, but usually we’re tracking a moving animal. We can improve our estimate if we divide by the norm of the whole acceleration vector, rather than dividing by g. So in practice, \\(\\hat{p}\\) will be:\n\\[\n\\hat{p} = -sin^{-1} \\frac{a_x}{||A^t||}\n\\]\nRoll is a bit trickier, but still doable. Start by dividing \\(a_y\\) by \\(a_z\\).\n\\[\n\\begin{align}\n\\frac{a_y}{a_z} &= \\frac{-cos~\\hat{p}~sin~\\hat{r}}{-cos~\\hat{p}~cos~\\hat{r}} \\\\\n\\frac{a_y}{a_z} &= \\frac{sin~\\hat{r}}{cos~\\hat{r}} \\\\\n\\frac{a_y}{a_z} &= tan~\\hat{r} \\\\\n\\hat{r} &= tan^{-1}~\\frac{a_y}{a_z} \\\\\n\\end{align}\n\\]"
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#magnetometers-earths-magnetic-field-and-heading",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#magnetometers-earths-magnetic-field-and-heading",
    "title": "Animal orientation with IMU tags",
    "section": "Magnetometers, Earth’s magnetic field, and heading",
    "text": "Magnetometers, Earth’s magnetic field, and heading\n\nWhat do magnetometers measure?\nFrom accelerometers we can estimate pitch and roll, but we need an alternative to estimate heading. The Earth’s magnetic field, roughly speaking, points up at the magnetic south pole, is parallel to the earth’s surface around the equator, and points down at the magnetic north pole. So unlike gravity, which always points down at the same strength, the magnetic field vector changes depending on where you are1. We usually call the magnetic field \\(B\\) and it’s defined by three parameters: \\(b\\) (the strength of the field), \\(i\\) (inclination of the field, or the angle it’s pointing below the horizon), and \\(d\\) (declination of the field, or the angle of magnetic north east of true north). Using rotation matrices, \\(B\\) is:\n\\[\n\\begin{align}\nB &= b N^T \\Psi^n P(-i) Y(d)\n\\end{align}\n\\]\n\\(b N^T \\Psi^n\\) means a vector with magnitude \\(b\\) pointing north in the navigational frame. Then we incline the field by pitching it \\(i\\) below the horizon and yaw it \\(d\\) degrees east. \\(-i\\) because in our navigational reference frame negative pitch means down, remember? Also, this is the only time \\(P\\) will be applied before \\(Y\\). That’s because these are global rotations, not local. You’ll never do this with tag or animal rotations; those are local rotations2. Solving for \\(B\\), we get:\n\\[\n\\begin{align}\nB &= b N^T \\Psi^n P(-i) Y(d) \\\\\nB &= b N^T \\Psi^n\n\\begin{bmatrix}\ncos ~ {-i} & 0 & sin ~ {-i} \\\\\n0 & 1 & 0 \\\\\n-sin ~ {-i} & 0 & cos ~ {-i}\n\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b N^T \\Psi^n\n\\begin{bmatrix}\ncos ~ i & 0 & -sin ~ i \\\\\n0 & 1 & 0 \\\\\nsin ~ i & 0 & cos ~ i\n\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b \\begin{bmatrix} 1 & 0 & 0 \\end{bmatrix}\n\\begin{bmatrix}\ncos ~ i & 0 & -sin ~ i \\\\\n0 & 1 & 0 \\\\\nsin ~ i & 0 & cos ~ i\n\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b \\begin{bmatrix} cos ~ i & 0 & -sin ~ i \\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b \\begin{bmatrix} cos~i ~ cos~d & -cos~i ~ sin~d & -sin ~ i \\end{bmatrix} \\\\\n\\end{align}\n\\]\nA little more complicated than just \\(\\begin{bmatrix} 0 & 0 & g \\end{bmatrix}\\), isn’t it? But it’s essential for figuring out our heading.\n\n\nEstimating heading\nWhen you use a compass to find north, it’s important to lay it flat. You may have seen compasses where the needle floats in a bubble, which keeps it level despite minor pitches and rolls. That’s called gimbaling the compass. We need to do the same for our 3d magnetometer readings. Unlike a hand-held compass, we can’t do that mechanically. Instead we use \\(\\hat{p}\\) and \\(\\hat{r}\\), which we got from the accelerometer, to rotate the the magnetometer readings to the horizontal. If \\(M^a\\) is the magnetometer reading on the animal, we’ll call the gimbaled version \\(M^h\\), where \\(h\\) means horizontal.\n\\[\n\\begin{align}\nM^h &= M^a (P(\\hat{p}) R(\\hat{r}))^{-1} \\\\\nM^h &= M^a R(\\hat{r})^{-1} P(\\hat{p})^{-1} \\\\\nM^h &= M^a R(\\hat{r})^T P(\\hat{p})^T \\\\\n\\end{align}\n\\]\nIn matrix multiplication, we get the inverse of a product \\((AB)^{-1}\\) by reversing and inverting the matrices \\(B^{-1}A^{-1}\\). That’s why roll and pitch get flipped around. And rotation matrices have the convenient property where their inverse is their transpose.\nNow that we’ve removed the pitch and roll of the magnetometer to get \\(M^h\\), the magnetic field is only a function of the animal’s heading, which we estimate as \\(\\hat{h}\\).\n\\[\n\\begin{align}\nM^h &= B Y(\\hat{h}) \\\\\nM^h &= b \\begin{bmatrix} cos~i ~ cos~d & -cos~i ~ sin~d & -sin ~ i \\end{bmatrix} \\begin{bmatrix}\ncos ~ \\hat{h} & -sin ~ \\hat{h} & 0 \\\\\nsin ~ \\hat{h} & cos ~ \\hat{h} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nM^h &= b\\begin{bmatrix}\ncos~i ~ cos~d ~ cos~\\hat{h} - cos~i ~ sin~d ~ sin~\\hat{h} &\n-cos~i ~ cos~d ~ sin~\\hat{h} - cos~i ~ sin~d ~ cos~\\hat{h} &\n-sin~i\n\\end{bmatrix} \\\\\nM^h &= b\\begin{bmatrix}\ncos~i (cos~d ~ cos~\\hat{h} - sin~d ~ sin~\\hat{h}) &\ncos~i (cos~d ~ sin~\\hat{h} + sin~d ~ cos~\\hat{h}) &\n-sin~i\n\\end{bmatrix} \\\\\n\\end{align}\n\\]\nNow divide \\(M^h_x\\) by \\(M^h_y\\).\n\n\n\n\n\n\nTip\n\n\n\nThe following requires the trigonometric identities for differences of angles, which you might not know off the top of your head. They are:\n\\[\n\\begin{align}\nsin(\\alpha - \\beta) &= sin~\\alpha ~ cos~\\beta - cos~\\alpha ~ sin~\\beta \\\\\ncos(\\alpha - \\beta) &= cos~\\alpha ~ cos~\\beta - sin~\\alpha ~ sin~\\beta\n\\end{align}\n\\]\n\n\n\\[\n\\begin{align}\n\\frac{M^h_y}{M^h_x} &= \\frac{cos~i (sin~\\hat{h} ~ cos~d - cos~\\hat{h} ~ sin~d)}{cos~i (cos~d ~ cos~\\hat{h} + sin~d ~ sin~\\hat{h})} \\\\\n\\frac{M^h_y}{M^h_x} &= \\frac{sin~\\hat{h} ~ cos~d - cos~\\hat{h} ~ sin~d}{cos~d ~ cos~\\hat{h} - sin~d ~ sin~\\hat{h}} \\\\\n\\frac{M^h_y}{M^h_x} &= \\frac{sin(\\hat{h} - d)}{cos(\\hat{h} - d)} \\\\\n\\frac{M^h_y}{M^h_x} &= tan(\\hat{h} - d) \\\\\n\\hat{h} - d &= tan^{-1}(\\frac{M^h_y}{M^h_x}) \\\\\n\\hat{h} &= tan^{-1}(\\frac{M^h_y}{M^h_x}) + d \\\\\n\\end{align}\n\\]\n\n\n\n\n\n\nNote\n\n\n\nThis is different than Mark Johnson’s result and I haven’t figure out why yet. I may have defined \\(B\\) differently, perhaps? But this way makes more sense to me because I can see how it uses declination to correct for the difference between magnetic and true north. I need to ask someone about this!"
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#what-about-w",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#what-about-w",
    "title": "Animal orientation with IMU tags",
    "section": "What about \\(W\\)?",
    "text": "What about \\(W\\)?\nUp to this point we have operated under the assumption the tag and animal reference frames were aligned. That’s often not the case, and figuring out \\(W\\) can be tricky! If the tag is attached to an animal in hand, as is often the case for seabirds and pinnipeds, then \\(W\\) may be very close to \\(I\\). However, if the tag is attached to an animal in motion, which is common in cetacean studies, \\(W\\) could be just about anything. The full suite of methods for estimating \\(W\\) from tag data itself is outside the scope of this blog post, but I will show how to derive \\(W\\) on two conditions. 1) There’s a period of time when the animal’s orientation is known (i.e., we know \\(Q\\)) and 2) the yaw of the tag with respect to the animal is 0. These conditions are typically met in the animal-in-hand scenario, where the tag is manually attached along the longitudinal axis of the animal, but the curvature of the animal’s body may pitch or roll the tag away from \\(I\\).\nLet \\(\\bar{A}_t\\) be the mean acceleration reading during the period of known animal orientation. Let’s also say that during this time, the animal’s pitch and roll relative to the navigational frame are 0 (i.e., it’s laying flat). Define the pitch and roll of the tag relative to the animal as \\(p_0\\) and \\(r_0\\), respectively. Notice \\(p_0\\) and \\(r_0\\) are the orientation of the tag relative to the animal, so they define \\(W^{-1}\\), not \\(W\\). Then:\n\\[\n\\begin{align}\n\\bar{A}_t &= g D^T Q W^{-1} \\\\\nQ &= Y(\\gamma)P(0)R(0) \\\\\nW^{-1} &= Y(0)P(p_0)R(r_0) \\\\\n\\bar{A}_t &= g \\begin{bmatrix}0 & 0 & 1\\end{bmatrix} Y(\\gamma)P(0)R(0) Y(0)P(p_0)R(r_0) \\\\\n\\bar{A}_t &= g \\begin{bmatrix}0 & 0 & 1\\end{bmatrix} P(p_0)R(r_0) \\\\\n\\bar{A}_t &= g \\begin{bmatrix}0 & 0 & 1\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ p_0 & 0 & sin ~ p_0 \\\\\n0 & 1 & 0 \\\\\n-sin ~ p_0 & 0 & cos ~ p_0\n\\end{bmatrix}\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r_0 & -sin ~ r_0 \\\\\n0 & sin ~ r_0 & cos ~ r_0\n\\end{bmatrix} \\\\\n\\bar{A}_t &= g \\begin{bmatrix}-sin ~ p_0 & 0 & cos ~ p_0\\end{bmatrix}  \n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r_0 & -sin ~ r_0 \\\\\n0 & sin ~ r_0 & cos ~ r_0\n\\end{bmatrix} \\\\\n\\bar{A}_t &= g \\begin{bmatrix}\n-sin~p_0 & cos~p_0~sin~r_0 & cos~p_0~cos~r_0\n\\end{bmatrix}\n\\end{align}\n\\]\nNow we can get \\(p_0\\) from \\(\\bar{A}_{tx}\\) and \\(r_0\\) from the ratio of \\(\\bar{A}_{ty}\\) and \\(\\bar{A}_{tz}\\).\n\\[\n\\begin{align}\n\\bar{A}_{tx} &= -g~sin~p_0 \\\\\np_0 &= -sin^{-1}\\frac{\\bar{A}_{tx}}{g}\n\\end{align}\n\\]\nUsing the same correction as before, we actually use \\(p_0 = -sin^{-1}\\frac{\\bar{A}_{tx}}{||\\bar{A}_t||}\\).\n\\[\n\\begin{align}\n\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} &= \\frac{cos~p_0 ~ sin~r_0}{cos~p_0 ~ cos~r_0} \\\\\n\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} &= \\frac{sin~r_0}{cos~r_0} \\\\\n\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} &= tan(r_0) \\\\\nr_0 &= tan^{-1}\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} \\\\\n\\end{align}\n\\]\nThus:\n\\[\n\\begin{align}\nW^{-1} &= P(p_0)R(r_0) \\\\\nW &= R(r_0)^TP(p_0)^T\n\\end{align}\n\\]"
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#summary",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#summary",
    "title": "Animal orientation with IMU tags",
    "section": "Summary",
    "text": "Summary\nNow that we have the derivations in place, we can estimate the animal’s pitch, roll, and heading. Here are the typical steps.\n\nMeasure acceleration and magnetism in the tag frame, \\(A^t\\) and \\(M^t\\)\nEstimate \\(W\\)\n\nMay use \\(p_0 = -sin^{-1}\\frac{\\bar{A}_{tx}}{||\\bar{A}_t||}\\) and \\(r_0 = tan^{-1}\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}}\\) if applicable (but remember \\(W^{-1}=P(p_0)R(r_0)\\), not \\(W=P(p_0)R(r_0)\\))\n\nConvert \\(A^t\\) and \\(M^t\\) to animal frame \\(A^a=A^tW\\), \\(M^a=M^tW\\)\nEstimate pitch and roll\n\n\\(\\hat{p}=-sin^{-1} \\frac{A^a_x}{||A^a||}\\)\n\\(\\hat{r} = tan^{-1}~\\frac{A^a_y}{A^a_z}\\)\n\nGimbal \\(M^a\\), to get \\(M^h = M^a R(\\hat{r})^T P(\\hat{p})^T\\)\nEstimate heading \\(\\hat{h} = tan^{-1}(\\frac{M^h_y}{M^h_x}) + d\\)"
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#footnotes",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#footnotes",
    "title": "Animal orientation with IMU tags",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe Earth’s gravitational field isn’t exactly uniform, but it’s close enough for our purposes.↩︎\nLinear algebra is frickin’ weird, I know, I’m so sorry↩︎"
  },
  {
    "objectID": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#sanity-check",
    "href": "posts/2024-08-26-animal-orientation-with-imu-ta/index.html#sanity-check",
    "title": "Animal orientation with IMU tags",
    "section": "Sanity check",
    "text": "Sanity check\nLet’s say we have an animal laying flat on the ground. The tag is on the animal’s back, to the right of the spine, closer to the tail than the head. So let’s say the tag’s pitch is 15° and the roll is 30° relative to the animal. In this case, the tag’s measured acceleration is\n\\[\n\\begin{align}\n\\bar{A}_t &= g D^T Q W^{-1} \\\\\n\\bar{A_t} &= g\\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix} I P(\\pi/12)R(\\pi/6) \\\\\n\\bar{A_t} &= g\\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix}P(\\pi/12)R(\\pi/6) \\\\\n\\bar{A_t} &= g\\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix}\n\\begin{bmatrix}\ncos ~ \\pi/12 & 0 & sin ~ \\pi/12 \\\\\n0 & 1 & 0 \\\\\n-sin ~ \\pi/12 & 0 & cos ~ \\pi/12\n\\end{bmatrix}\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ \\pi/6 & -sin ~ \\pi/6 \\\\\n0 & sin ~ \\pi/6 & cos ~ \\pi/6\n\\end{bmatrix} \\\\\n\\bar{A_t} &= g\\begin{bmatrix} -sin~\\pi/12 & 0 & cos~\\pi/12 \\end{bmatrix}\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ \\pi/6 & -sin ~ \\pi/6 \\\\\n0 & sin ~ \\pi/6 & cos ~ \\pi/6\n\\end{bmatrix} \\\\\n\\bar{A_t} &= g\\begin{bmatrix}-sin~\\pi/12 & cos~\\pi/12 ~ sin~\\pi/6 & cos~\\pi/12 ~ cos~\\pi/6\\end{bmatrix} \\\\\n\\bar{A_t} &= g\\begin{bmatrix}-0.259 & 0.483 & 0.837\\end{bmatrix}\n\\end{align}\n\\]\nLet’s estimate \\(W\\).\n\n# Acceleration vector\nAt &lt;- 9.8 * c(-0.259, 0.483, 0.837)\nAt_norm &lt;- sqrt(sum(At * At))\n\n# Pitch and roll of W^-1\np0 &lt;- -asin(At[1] / At_norm)\nr0 &lt;- atan2(At[2], At[3])\n\n# Rotation matrix convenience functions\nP &lt;- function(p) {\n  matrix(c(\n    cos(p),  0, sin(p),\n    0,       1, 0,\n    -sin(p), 0, cos(p)\n  ), byrow = TRUE, nrow = 3)\n}\nR &lt;- function(r) {\n  matrix(c(\n    1, 0,      0,\n    0, cos(r), -sin(r),\n    0, sin(r), cos(r)\n  ), byrow = TRUE, nrow = 3)\n}\n\n# W^-1 and W\nWi &lt;- P(p0) %*% R(r0)\nW &lt;- t(Wi)\n\nW\n\n          [,1]       [,2]       [,3]\n[1,] 0.9659099  0.0000000 -0.2588785\n[2,] 0.1293906  0.8661339  0.4827734\n[3,] 0.2242234 -0.4998120  0.8366073\n\n\nBecause \\(\\Psi^t=\\Psi^aW\\), \\(A_t = A_aW\\), so rotation the animal’s acceleration vector by \\(W\\) should give us the original \\(A_t\\).\n\n# Animal is only experiencing gravity in the Z axis\nAa &lt;- c(0, 0, 9.8)\n# Rotating At by W should give us Aa\nAa2 &lt;- At %*% W\n\nrbind(Aa = round(as.vector(Aa), 2), \n      Aa2 = round(as.vector(Aa2), 2))\n\n    [,1] [,2] [,3]\nAa     0    0  9.8\nAa2    0    0  9.8\n\n\nBeautiful!"
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html",
    "title": "Animal orientation with IMU tags",
    "section": "",
    "text": "Every 6-18 months, my friend Jessie and I try to remember the linear algebra required to estimate animal orientation (pitch, roll, heading) from an accelerometer/magnetometer tag. This usually involves a 2-3 hour Zoom call, frantic whiteboard activity, and moderate hair loss. In the hopes of breaking this stressful cycle, here are my notes about the subject."
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#reference-frames",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#reference-frames",
    "title": "Animal orientation with IMU tags",
    "section": "Reference frames",
    "text": "Reference frames\nA major source of confusion is often the reference frame. We’re going to describe orientation as a rotation. The reference frame describes what it’s a rotation from. A pitch of 45° means something intuitively (facing halfway from the horizon to straight up), but mathematically it only has meaning if we specify what we’re pitching 45° relative to. Enter reference frames.\nWe use three reference frames, which we call \\(\\Psi\\). One for the world at large (AKA navigation, \\(\\Psi^n\\)), one for the animal’s body (\\(\\Psi^a\\)), and a third for the tag (\\(\\Psi^t\\)).\n\\[\n\\begin{align}\n\\Psi^n &= \\begin{bmatrix}\nN ~ E ~ D\n\\end{bmatrix} \\\\\n\\Psi^a &= \\begin{bmatrix}\nX^a ~ Y^a ~ Z^a\n\\end{bmatrix} \\\\\n\\Psi^t &= \\begin{bmatrix}\nX^t ~ Y^t ~ Z^t\n\\end{bmatrix}\n\\end{align}\n\\]\nWhere \\(N\\), \\(E\\), and \\(D\\) represent the vectors for north, east, and down, respectively. \\(X^a\\) is the longitudinal axis of the animal (along the spine), \\(Y^a\\) is the transverse axis (left to right), and \\(Z^a\\) is the dorso-ventral axis. Same for \\(X^t\\), \\(Y^t\\), \\(Z^t\\), but for the tag instead of the animal.\nBecause the vectors \\(N\\), \\(X^a\\), etc are 3x1, these reference frames are all 3x3 matrices. When we align with their point of view, we define them to be the identity matrix, \\(I\\).\n\n\n\n\n\n\nNote\n\n\n\n\\(\\Psi^n\\) is controversial within the animal tagging community. A conventional right-hand rule reference frame would be \\(\\begin{bmatrix} N ~ W ~ U \\end{bmatrix}\\), not \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\). Hold your hand out and stick out your thumb and first two fingers all at right angles (pointer forward, thumb up, middle finger left). Let your pointer be \\(N\\), your middle finger be \\(W\\), and your thumb be \\(U\\). Notice how comfortable that is? Unfortunately, the math makes it such that positive pitch means down in this orientation. Most people find that counter-intuitive. We have two options to change that: adopt a left-hand rule system \\(\\begin{bmatrix} N ~ E ~ U \\end{bmatrix}\\) or an “upside down” right-hand rule \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\). Within the marine vertebrate research community, there’s a split. Some use the left-hand rule \\(\\begin{bmatrix} N ~ E ~ U \\end{bmatrix}\\) (Johnson and Tyack 2003) and others the upside-down right-hand rule \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\) (Cade et al. 2021). I find keeping the right-hand rule makes more sense to me personally, so that’s what I’ll use here."
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#rotation-matrices",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#rotation-matrices",
    "title": "Animal orientation with IMU tags",
    "section": "Rotation matrices",
    "text": "Rotation matrices\nRotations are defined using Euler angles: the familiar pitch, roll, and heading. We define two important rotation matrices: \\(\\boldsymbol{Q}\\) and \\(\\boldsymbol{W}\\).\n\\(\\boldsymbol{Q}\\) is the rotation matrix describing the orientation of the animal frame relative to the navigation frame.\n\\[\n\\Psi^a = \\Psi^n \\boldsymbol{Q}\n\\]\nThat’s often tricky to understand, so I’ll repeat it. Our estimate of the animal’s body orientation is a rotation matrix. \\(\\boldsymbol{Q}\\) itself is the product of three other rotation matrices, which define the pitch, roll, and heading of the animal. Therefore, \\(\\boldsymbol{Q}\\) is a biologically meaningful variable that we’re interested in studying.\n\\(\\boldsymbol{W}\\) is the rotation matrix describing the animal’s orientation relative to the tag.\n\\[\n\\Psi^a = \\Psi^t \\boldsymbol{W}\n\\]\nLike \\(\\boldsymbol{Q}\\), \\(\\boldsymbol{W}\\) is the product of three rotations, which yaw, pitch, and roll the tag relative to the animal. Unlike \\(\\boldsymbol{Q}\\), \\(\\boldsymbol{W}\\) is not biologically meaningful. However, we need \\(\\boldsymbol{W}\\) to figure out \\(\\boldsymbol{Q}\\) because we can’t measure \\(\\boldsymbol{Q}\\) directly.\nWhat does a rotation matrix actually look like? There are three we use often, which are the rotations around the reference frame axes themselves. Hold out your hand in \\(\\begin{bmatrix} N ~ E ~ D \\end{bmatrix}\\) orientation. Rotate forward to pitch your pointer down. Which axis did you rotate around? Your thumb is pointing in a new direction, too, but your middle finger (which represents \\(E\\), the y-axis) is still pointing to the right. So we see pitch is a rotation around the y-axis. The same is also true for roll (around the x-axis) and yaw (around the z-axis). Mathematically, they look like this:\n\\[\n\\begin{align}\nY(\\gamma) &= \\begin{bmatrix}\ncos ~ \\gamma & -sin ~ \\gamma & 0 \\\\\nsin ~ \\gamma & cos ~ \\gamma & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nP(p) &= \\begin{bmatrix}\ncos ~ p & 0 & sin ~ p \\\\\n0 & 1 & 0 \\\\\n-sin ~ p & 0 & cos ~ p\n\\end{bmatrix} \\\\\nR(r) &= \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r & -sin ~ r \\\\\n0 & sin ~ r & cos ~ r\n\\end{bmatrix}\n\\end{align}\n\\]\nWhere \\(Y\\), \\(P\\), and \\(R\\) are the yaw, pitch, and roll matrices, respectively. \\(\\gamma\\), \\(p\\), and \\(r\\) are the yaw, pitch, and roll angles themselves. They’re not symmetrical matrices, which means matrix multiplication won’t be commutative, so order matters. We always apply them in the order \\(YPR\\). This has the effect of rotating around the local axes, those of the thing itself being rotated. The reverse order, \\(RPY\\) applies the rotations relative to the global axes. If that doesn’t makes sense don’t worry about it, just remember for \\(Q\\) and \\(W\\) we always rotate in the order \\(YPR\\)."
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#accelerometers-gravity-pitch-and-roll",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#accelerometers-gravity-pitch-and-roll",
    "title": "Animal orientation with IMU tags",
    "section": "Accelerometers, gravity, pitch, and roll",
    "text": "Accelerometers, gravity, pitch, and roll\n\nWhat do accelerometers measure?\nAccelerometers measure acceleration. Acceleration can mean a few different things, and the particular kind of acceleration measured by accelerometers is not the intuitive one for most of us.\nImagine a tag at rest on a table. Is it accelerating? Instinctively, we think of acceleration relative to a coordinate system. And since the tag’s position isn’t changing, we would say it isn’t accelerating. However, an accelerometer would measure an acceleration of 9.8 m s-2 straight down. Similarly, if we went to the top of a tower and dropped a tag, we would observe it accelerating at 9.8 m s-2 straight down, but the accelerometer would read 0.\nThese counter-intuitive readings are because accelerometers measure proper acceleration, which is relative to the inertial frame of reference. We don’t need to dive into the precise physics of inertial reference frames. In short, here’s the intuition that will help: the accelerometer readings are relative to an object in free fall.\n\n\nEstimating pitch and roll\nWe can use the accelerometer readings to detect the pitch and roll of an object at rest. At rest, the only force is gravity, which is aligned downwards, along \\(D\\). So the acceleration measured by the tag is:\n\\[\nA^t = g D^T \\Psi^t\n\\]\nWhere \\(A^t\\) is the 1x3 vector of accelerometer readings \\(\\begin{bmatrix} a_x ~ a_y ~ a_z \\end{bmatrix}\\). \\(g\\) is the strength of gravitational acceleration (about 9.8 m s-2). Notice the T in \\(D^T\\) is capitalized. We use lower case \\(t\\) to indicate something to do with the tag e.g., \\(\\Psi^t\\). Capital T here means we’re transposing the column vector representing “down” into a row vector. That just makes the math easier.\nWe have a problem here, though. \\(A^t\\) is measured in the tag’s reference frame (hence the \\(\\Psi^t\\)), but down \\(D^T\\) is defined in the navigation frame. Let’s pretend for a second the tag frame is aligned with the animal frame (i.e., \\(\\Psi^a = \\Psi^t\\)) . Then, recall our reference frame definition \\(\\Psi^a = \\Psi^n Q\\). Substituting that in, we get:\n\\[\n\\begin{align}\nA^t &= g D^T \\Psi^t \\\\\nA^t &= g D^T \\Psi^n Q \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix}Q\n\\end{align}\n\\]That works because, by definition, \\(D^T \\Psi^n = \\begin{bmatrix}0 ~ 0 ~ 1\\end{bmatrix}\\). That’s how we defined “down” in the navigational reference frame.\nNow recall the rotation matrices for yaw, pitch, and roll, and that \\(Q\\) is the composition of those three. When we substitute in \\(Y\\), \\(D\\) will just cancel it out. This should make sense intuitively: gravity’s effect on your acceleration is the same whether you face north, south, east, or west. Then we can solve for \\(A^t\\) based on \\(P\\) and \\(R\\).\n\\[\n\\begin{align}\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} Q \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} Y(\\gamma) P(p) R(r) \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} \\begin{bmatrix}\ncos ~ \\gamma & -sin ~ \\gamma & 0 \\\\\nsin ~ \\gamma & cos ~ \\gamma & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} P(p) R(r) \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} P(p) R(r) \\\\\nA^t &= g \\begin{bmatrix} 0 ~ 0 ~ 1 \\end{bmatrix} \\begin{bmatrix}\ncos ~ p & 0 & sin ~ p \\\\\n0 & 1 & 0 \\\\\n-sin ~ p & 0 & cos ~ p\n\\end{bmatrix} \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r & -sin ~ r \\\\\n0 & sin ~ r & cos ~ r\n\\end{bmatrix} \\\\\nA^t &= g \\begin{bmatrix} -sin~p & 0 & cos~p \\end{bmatrix} \\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r & -sin ~ r \\\\\n0 & sin ~ r & cos ~ r\n\\end{bmatrix} \\\\\nA^t &= g \\begin{bmatrix} -sin~p & -cos~p~sin~r & -cos~p~cos~r \\end{bmatrix}  \\\\\n\\end{align}\n\\]\nNow we can solve for \\(p\\) and \\(r\\), our pitch and roll. We’ll call them \\(\\hat{p}\\) and \\(\\hat{r}\\) to indicate they’re estimates. First, \\(p\\):\n\\[\n\\begin{align}\na_x &= -g ~ sin ~ \\hat{p} \\\\\nsin ~ \\hat{p} &= \\frac{a_x}{-g} \\\\\n\\hat{p} &= -sin^{-1} \\frac{a_x}{g}\n\\end{align}\n\\]\nNote: remember \\(sin ~ {-x} = -sin ~ x\\). The formula for \\(\\hat{p}\\) is correct for an object at rest, but usually we’re tracking a moving animal. We can improve our estimate if we divide by the norm of the whole acceleration vector, rather than dividing by g. So in practice, \\(\\hat{p}\\) will be:\n\\[\n\\hat{p} = -sin^{-1} \\frac{a_x}{||A^t||}\n\\]\nRoll is a bit trickier, but still doable. Start by dividing \\(a_y\\) by \\(a_z\\).\n\\[\n\\begin{align}\n\\frac{a_y}{a_z} &= \\frac{-cos~\\hat{p}~sin~\\hat{r}}{-cos~\\hat{p}~cos~\\hat{r}} \\\\\n\\frac{a_y}{a_z} &= \\frac{sin~\\hat{r}}{cos~\\hat{r}} \\\\\n\\frac{a_y}{a_z} &= tan~\\hat{r} \\\\\n\\hat{r} &= tan^{-1}~\\frac{a_y}{a_z} \\\\\n\\end{align}\n\\]"
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#magnetometers-earths-magnetic-field-and-heading",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#magnetometers-earths-magnetic-field-and-heading",
    "title": "Animal orientation with IMU tags",
    "section": "Magnetometers, Earth’s magnetic field, and heading",
    "text": "Magnetometers, Earth’s magnetic field, and heading\n\nWhat do magnetometers measure?\nFrom accelerometers we can estimate pitch and roll, but we need an alternative to estimate heading. The Earth’s magnetic field, roughly speaking, points up at the magnetic south pole, is parallel to the earth’s surface around the equator, and points down at the magnetic north pole. So unlike gravity, which always points down at the same strength, the magnetic field vector changes depending on where you are1. We usually call the magnetic field \\(B\\) and it’s defined by three parameters: \\(b\\) (the strength of the field), \\(i\\) (inclination of the field, or the angle it’s pointing below the horizon), and \\(d\\) (declination of the field, or the angle of magnetic north east of true north). Using rotation matrices, \\(B\\) is:\n\\[\n\\begin{align}\nB &= b N^T \\Psi^n P(-i) Y(d)\n\\end{align}\n\\]\n\\(b N^T \\Psi^n\\) means a vector with magnitude \\(b\\) pointing north in the navigational frame. Then we incline the field by pitching it \\(i\\) below the horizon and yaw it \\(d\\) degrees east. \\(-i\\) because in our navigational reference frame negative pitch means down, remember? Also, this is the only time \\(P\\) will be applied before \\(Y\\). That’s because these are global rotations, not local. You’ll never do this with tag or animal rotations; those are local rotations2. Solving for \\(B\\), we get:\n\\[\n\\begin{align}\nB &= b N^T \\Psi^n P(-i) Y(d) \\\\\nB &= b N^T \\Psi^n\n\\begin{bmatrix}\ncos ~ {-i} & 0 & sin ~ {-i} \\\\\n0 & 1 & 0 \\\\\n-sin ~ {-i} & 0 & cos ~ {-i}\n\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b N^T \\Psi^n\n\\begin{bmatrix}\ncos ~ i & 0 & -sin ~ i \\\\\n0 & 1 & 0 \\\\\nsin ~ i & 0 & cos ~ i\n\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b \\begin{bmatrix} 1 & 0 & 0 \\end{bmatrix}\n\\begin{bmatrix}\ncos ~ i & 0 & -sin ~ i \\\\\n0 & 1 & 0 \\\\\nsin ~ i & 0 & cos ~ i\n\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b \\begin{bmatrix} cos ~ i & 0 & -sin ~ i \\end{bmatrix}\n\\begin{bmatrix}\ncos ~ d & -sin ~ d & 0 \\\\\nsin ~ d & cos ~ d & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nB &= b \\begin{bmatrix} cos~i ~ cos~d & -cos~i ~ sin~d & -sin ~ i \\end{bmatrix} \\\\\n\\end{align}\n\\]\nA little more complicated than just \\(\\begin{bmatrix} 0 & 0 & g \\end{bmatrix}\\), isn’t it? But it’s essential for figuring out our heading.\n\n\nEstimating heading\nWhen you use a compass to find north, it’s important to lay it flat. You may have seen compasses where the needle floats in a bubble, which keeps it level despite minor pitches and rolls. That’s called gimbaling the compass. We need to do the same for our 3d magnetometer readings. Unlike a hand-held compass, we can’t do that mechanically. Instead we use \\(\\hat{p}\\) and \\(\\hat{r}\\), which we got from the accelerometer, to rotate the the magnetometer readings to the horizontal. If \\(M^a\\) is the magnetometer reading on the animal, we’ll call the gimbaled version \\(M^h\\), where \\(h\\) means horizontal.\n\\[\n\\begin{align}\nM^h &= M^a (P(\\hat{p}) R(\\hat{r}))^{-1} \\\\\nM^h &= M^a R(\\hat{r})^{-1} P(\\hat{p})^{-1} \\\\\nM^h &= M^a R(\\hat{r})^T P(\\hat{p})^T \\\\\n\\end{align}\n\\]\nIn matrix multiplication, we get the inverse of a product \\((AB)^{-1}\\) by reversing and inverting the matrices \\(B^{-1}A^{-1}\\). That’s why roll and pitch get flipped around. And rotation matrices have the convenient property where their inverse is their transpose.\nNow that we’ve removed the pitch and roll of the magnetometer to get \\(M^h\\), the magnetic field is only a function of the animal’s heading, which we estimate as \\(\\hat{h}\\).\n\\[\n\\begin{align}\nM^h &= B Y(\\hat{h}) \\\\\nM^h &= b \\begin{bmatrix} cos~i ~ cos~d & -cos~i ~ sin~d & -sin ~ i \\end{bmatrix} \\begin{bmatrix}\ncos ~ \\hat{h} & -sin ~ \\hat{h} & 0 \\\\\nsin ~ \\hat{h} & cos ~ \\hat{h} & 0 \\\\\n0 & 0 & 1\n\\end{bmatrix} \\\\\nM^h &= b\\begin{bmatrix}\ncos~i ~ cos~d ~ cos~\\hat{h} - cos~i ~ sin~d ~ sin~\\hat{h} &\n-cos~i ~ cos~d ~ sin~\\hat{h} - cos~i ~ sin~d ~ cos~\\hat{h} &\n-sin~i\n\\end{bmatrix} \\\\\nM^h &= b\\begin{bmatrix}\ncos~i (cos~d ~ cos~\\hat{h} - sin~d ~ sin~\\hat{h}) &\ncos~i (cos~d ~ sin~\\hat{h} + sin~d ~ cos~\\hat{h}) &\n-sin~i\n\\end{bmatrix} \\\\\n\\end{align}\n\\]\nNow divide \\(M^h_x\\) by \\(M^h_y\\).\n\n\n\n\n\n\nTip\n\n\n\nThe following requires the trigonometric identities for differences of angles, which you might not know off the top of your head. They are:\n\\[\n\\begin{align}\nsin(\\alpha - \\beta) &= sin~\\alpha ~ cos~\\beta - cos~\\alpha ~ sin~\\beta \\\\\ncos(\\alpha - \\beta) &= cos~\\alpha ~ cos~\\beta - sin~\\alpha ~ sin~\\beta\n\\end{align}\n\\]\n\n\n\\[\n\\begin{align}\n\\frac{M^h_y}{M^h_x} &= \\frac{cos~i (sin~\\hat{h} ~ cos~d - cos~\\hat{h} ~ sin~d)}{cos~i (cos~d ~ cos~\\hat{h} + sin~d ~ sin~\\hat{h})} \\\\\n\\frac{M^h_y}{M^h_x} &= \\frac{sin~\\hat{h} ~ cos~d - cos~\\hat{h} ~ sin~d}{cos~d ~ cos~\\hat{h} - sin~d ~ sin~\\hat{h}} \\\\\n\\frac{M^h_y}{M^h_x} &= \\frac{sin(\\hat{h} - d)}{cos(\\hat{h} - d)} \\\\\n\\frac{M^h_y}{M^h_x} &= tan(\\hat{h} - d) \\\\\n\\hat{h} - d &= tan^{-1}(\\frac{M^h_y}{M^h_x}) \\\\\n\\hat{h} &= tan^{-1}(\\frac{M^h_y}{M^h_x}) + d \\\\\n\\end{align}\n\\]\n\n\n\n\n\n\nNote\n\n\n\nThis is different than Mark Johnson’s result and I haven’t figure out why yet. I may have defined \\(B\\) differently, perhaps? But this way makes more sense to me because I can see how it uses declination to correct for the difference between magnetic and true north. I need to ask someone about this!"
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#what-about-w",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#what-about-w",
    "title": "Animal orientation with IMU tags",
    "section": "What about \\(W\\)?",
    "text": "What about \\(W\\)?\nUp to this point we have operated under the assumption the tag and animal reference frames were aligned. That’s often not the case, and figuring out \\(W\\) can be tricky! If the tag is attached to an animal in hand, as is often the case for seabirds and pinnipeds, then \\(W\\) may be very close to \\(I\\). However, if the tag is attached to an animal in motion, which is common in cetacean studies, \\(W\\) could be just about anything. The full suite of methods for estimating \\(W\\) from tag data itself is outside the scope of this blog post, but I will show how to derive \\(W\\) on two conditions. 1) There’s a period of time when the animal’s orientation is known (i.e., we know \\(Q\\)) and 2) the yaw of the tag with respect to the animal is 0. These conditions are typically met in the animal-in-hand scenario, where the tag is manually attached along the longitudinal axis of the animal, but the curvature of the animal’s body may pitch or roll the tag away from \\(I\\).\nLet \\(\\bar{A}_t\\) be the mean acceleration reading during the period of known animal orientation. Let’s also say that during this time, the animal’s pitch and roll relative to the navigational frame are 0 (i.e., it’s laying flat). Define the pitch and roll of the tag relative to the animal as \\(p_0\\) and \\(r_0\\), respectively. Notice \\(p_0\\) and \\(r_0\\) are the orientation of the tag relative to the animal, so they define \\(W^{-1}\\), not \\(W\\). Then:\n\\[\n\\begin{align}\n\\bar{A}_t &= g D^T Q W^{-1} \\\\\nQ &= Y(\\gamma)P(0)R(0) \\\\\nW^{-1} &= Y(0)P(p_0)R(r_0) \\\\\n\\bar{A}_t &= g \\begin{bmatrix}0 & 0 & 1\\end{bmatrix} Y(\\gamma)P(0)R(0) Y(0)P(p_0)R(r_0) \\\\\n\\bar{A}_t &= g \\begin{bmatrix}0 & 0 & 1\\end{bmatrix} P(p_0)R(r_0) \\\\\n\\bar{A}_t &= g \\begin{bmatrix}0 & 0 & 1\\end{bmatrix}\n\\begin{bmatrix}\ncos ~ p_0 & 0 & sin ~ p_0 \\\\\n0 & 1 & 0 \\\\\n-sin ~ p_0 & 0 & cos ~ p_0\n\\end{bmatrix}\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r_0 & -sin ~ r_0 \\\\\n0 & sin ~ r_0 & cos ~ r_0\n\\end{bmatrix} \\\\\n\\bar{A}_t &= g \\begin{bmatrix}-sin ~ p_0 & 0 & cos ~ p_0\\end{bmatrix}  \n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ r_0 & -sin ~ r_0 \\\\\n0 & sin ~ r_0 & cos ~ r_0\n\\end{bmatrix} \\\\\n\\bar{A}_t &= g \\begin{bmatrix}\n-sin~p_0 & cos~p_0~sin~r_0 & cos~p_0~cos~r_0\n\\end{bmatrix}\n\\end{align}\n\\]\nNow we can get \\(p_0\\) from \\(\\bar{A}_{tx}\\) and \\(r_0\\) from the ratio of \\(\\bar{A}_{ty}\\) and \\(\\bar{A}_{tz}\\).\n\\[\n\\begin{align}\n\\bar{A}_{tx} &= -g~sin~p_0 \\\\\np_0 &= -sin^{-1}\\frac{\\bar{A}_{tx}}{g}\n\\end{align}\n\\]\nUsing the same correction as before, we actually use \\(p_0 = -sin^{-1}\\frac{\\bar{A}_{tx}}{||\\bar{A}_t||}\\).\n\\[\n\\begin{align}\n\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} &= \\frac{cos~p_0 ~ sin~r_0}{cos~p_0 ~ cos~r_0} \\\\\n\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} &= \\frac{sin~r_0}{cos~r_0} \\\\\n\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} &= tan(r_0) \\\\\nr_0 &= tan^{-1}\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}} \\\\\n\\end{align}\n\\]\nThus:\n\\[\n\\begin{align}\nW^{-1} &= P(p_0)R(r_0) \\\\\nW &= R(r_0)^TP(p_0)^T\n\\end{align}\n\\]"
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#summary",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#summary",
    "title": "Animal orientation with IMU tags",
    "section": "Summary",
    "text": "Summary\nNow that we have the derivations in place, we can estimate the animal’s pitch, roll, and heading. Here are the typical steps.\n\nMeasure acceleration and magnetism in the tag frame, \\(A^t\\) and \\(M^t\\)\nEstimate \\(W\\)\n\nMay use \\(p_0 = -sin^{-1}\\frac{\\bar{A}_{tx}}{||\\bar{A}_t||}\\) and \\(r_0 = tan^{-1}\\frac{\\bar{A}_{ty}}{\\bar{A}_{tz}}\\) if applicable (but remember \\(W^{-1}=P(p_0)R(r_0)\\), not \\(W=P(p_0)R(r_0)\\))\n\nConvert \\(A^t\\) and \\(M^t\\) to animal frame \\(A^a=A^tW\\), \\(M^a=M^tW\\)\nEstimate pitch and roll\n\n\\(\\hat{p}=-sin^{-1} \\frac{A^a_x}{||A^a||}\\)\n\\(\\hat{r} = tan^{-1}~\\frac{A^a_y}{A^a_z}\\)\n\nGimbal \\(M^a\\), to get \\(M^h = M^a R(\\hat{r})^T P(\\hat{p})^T\\)\nEstimate heading \\(\\hat{h} = tan^{-1}(\\frac{M^h_y}{M^h_x}) + d\\)"
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#sanity-check",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#sanity-check",
    "title": "Animal orientation with IMU tags",
    "section": "Sanity check",
    "text": "Sanity check\nLet’s say we have an animal laying flat on the ground. The tag is on the animal’s back, to the right of the spine, closer to the tail than the head. So let’s say the tag’s pitch is 15° and the roll is 30° relative to the animal. In this case, the tag’s measured acceleration is\n\\[\n\\begin{align}\n\\bar{A}_t &= g D^T Q W^{-1} \\\\\n\\bar{A_t} &= g\\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix} I P(\\pi/12)R(\\pi/6) \\\\\n\\bar{A_t} &= g\\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix}P(\\pi/12)R(\\pi/6) \\\\\n\\bar{A_t} &= g\\begin{bmatrix} 0 & 0 & 1 \\end{bmatrix}\n\\begin{bmatrix}\ncos ~ \\pi/12 & 0 & sin ~ \\pi/12 \\\\\n0 & 1 & 0 \\\\\n-sin ~ \\pi/12 & 0 & cos ~ \\pi/12\n\\end{bmatrix}\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ \\pi/6 & -sin ~ \\pi/6 \\\\\n0 & sin ~ \\pi/6 & cos ~ \\pi/6\n\\end{bmatrix} \\\\\n\\bar{A_t} &= g\\begin{bmatrix} -sin~\\pi/12 & 0 & cos~\\pi/12 \\end{bmatrix}\n\\begin{bmatrix}\n1 & 0 & 0 \\\\\n0 & cos ~ \\pi/6 & -sin ~ \\pi/6 \\\\\n0 & sin ~ \\pi/6 & cos ~ \\pi/6\n\\end{bmatrix} \\\\\n\\bar{A_t} &= g\\begin{bmatrix}-sin~\\pi/12 & cos~\\pi/12 ~ sin~\\pi/6 & cos~\\pi/12 ~ cos~\\pi/6\\end{bmatrix} \\\\\n\\bar{A_t} &= g\\begin{bmatrix}-0.259 & 0.483 & 0.837\\end{bmatrix}\n\\end{align}\n\\]\nLet’s estimate \\(W\\).\n\n# Acceleration vector\nAt &lt;- 9.8 * c(-0.259, 0.483, 0.837)\nAt_norm &lt;- sqrt(sum(At * At))\n\n# Pitch and roll of W^-1\np0 &lt;- -asin(At[1] / At_norm)\nr0 &lt;- atan2(At[2], At[3])\n\n# Rotation matrix convenience functions\nP &lt;- function(p) {\n  matrix(c(\n    cos(p),  0, sin(p),\n    0,       1, 0,\n    -sin(p), 0, cos(p)\n  ), byrow = TRUE, nrow = 3)\n}\nR &lt;- function(r) {\n  matrix(c(\n    1, 0,      0,\n    0, cos(r), -sin(r),\n    0, sin(r), cos(r)\n  ), byrow = TRUE, nrow = 3)\n}\n\n# W^-1 and W\nWi &lt;- P(p0) %*% R(r0)\nW &lt;- t(Wi)\n\nW\n\n          [,1]       [,2]       [,3]\n[1,] 0.9659099  0.0000000 -0.2588785\n[2,] 0.1293906  0.8661339  0.4827734\n[3,] 0.2242234 -0.4998120  0.8366073\n\n\nBecause \\(\\Psi^t=\\Psi^aW\\), \\(A_t = A_aW\\), so rotation the animal’s acceleration vector by \\(W\\) should give us the original \\(A_t\\).\n\n# Animal is only experiencing gravity in the Z axis\nAa &lt;- c(0, 0, 9.8)\n# Rotating At by W should give us Aa\nAa2 &lt;- At %*% W\n\nrbind(Aa = round(as.vector(Aa), 2), \n      Aa2 = round(as.vector(Aa2), 2))\n\n    [,1] [,2] [,3]\nAa     0    0  9.8\nAa2    0    0  9.8\n\n\nBeautiful!"
  },
  {
    "objectID": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#footnotes",
    "href": "posts/2024-08-30-animal-orientation-with-imu-ta/index.html#footnotes",
    "title": "Animal orientation with IMU tags",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe Earth’s gravitational field isn’t exactly uniform, but it’s close enough for our purposes.↩︎\nLinear algebra is frickin’ weird, I know, I’m so sorry↩︎"
  }
]